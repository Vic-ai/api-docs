---
openapi: 3.1.0
info:
  version: 0.20.0
  contact: {}
  title: Vic.ai API
  description:
    $ref: 'docs/main.md'
security:
  - BearerAuth: []
servers:
  - url: https://api.us.stage.vic.ai/v0
    description: staging server, US
  - url: https://api.no.stage.vic.ai/v0
    description: staging server, NO
  - url: https://api.us.vic.ai/v0
    description: production server, US
  - url: https://api.no.vic.ai/v0
    description: production server, NO
tags:
  - name: Authentication
    description:
      $ref: 'docs/authentication.md'
  - name: Pagination
    description:
      $ref: 'docs/pagination.md'
  - name: Accounts
    description: |
      GL (General Ledger) accounts are part of your *ERP* **Masterdata**. In
      order to be associated with an invoice line item, key data about the
      account must be stored in Vic.ai.  These operations allow querying and
      manipulation of these GL account data.
  - name: Attachments
    description:
      $ref: 'docs/attachments.md'
  - name: Dimensions
    description: |
      Dimensions are part of your *ERP* **Masterdata**, and represent business
      categories that are associated with invoice line items, that Vic.ai can
      automatically assign to invoice line items. These operations allow
      querying and manipulation of the dimension data.
  - name: Invoices
    description: |
      These routes give you read-only access to two types of invoices:
      - Invoices which have not yet been posted to the ERP system (restricted access).
      - Invoices which have been posted to the ERP system.
  - name: Invoices for training
    description: |
      Invoices used for training AI models.
  - name: Payment batches
    description: |
      Payment batches are a collection of payments that are made to vendors.
  - name: Payment terms
    description: |
      Payment terms are part of your *ERP* **Masterdata**, and represent
      payment terms that Vic.ai can automatically assign to invoices. Some
      vendors may have a default payment term, and some invoices may have a
      specific payment term. In either case, Vic.ai can automatically assign
      payment terms to invoices.
  - name: Purchase orders
    description: The purchase orders.
  - name: Status
    description: |
      Status requests on the state of the Vic.ai system.
  - name: Tags
    description: |
      Tags are part of your *ERP* **Masterdata**, and represent business
      categories that are associated with certain entities, like Vendor.
  - name: Tax codes
    description: The tax codes.
  - name: VAT codes
    description: |
      In some regions, VAT codes are part of your *ERP* **Masterdata**, that
      represent timeboxed VAT codes and VAT values that Vic.ai can automatically
      assign to invoice line items.
  - name: Vendors
    description: |
      Vendors are part of your *ERP* **Masterdata**, and represent companies
      that produce invoices.  In order to be associated with an invoice, key
      data about the vendor must be stored in Vic.ai. These operations allow
      querying and manipulation of the vendor data.
  - name: Vendor groups
    description: |
      Vendors can be grouped together in Vic.ai. This is especially useful
      for purchase order matching where you want to match a purchase order
      to a group of vendors.
  - name: Vendor tags
    description: |
      Vendor tags are used to categorize vendors using tags.
  - name: Webhooks
    description:
      $ref: 'docs/webhooks.md'
paths:
  /token:
    post:
      description: |
        Use this endpoint to obtain an access token that can be used to authenticate subsequent requests to the API.
      summary: Obtain an access token
      operationId: obtainToken
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTokenInput'
      responses:
        '200':
          $ref: '#/components/responses/TokenCreatedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /healthCheck:
    get:
      description: |
        Use this request to obtain a health check statement.
      summary: Health check
      operationId: healthCheck
      tags: [Status]
      responses:
        '200':
          $ref: '#/components/responses/HealthyResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /accounts:
    get:
      description: |
        Use this request to query the GL account data that are stored in Vic.ai.
      summary: List all accounts
      operationId: listAccounts
      tags: [Accounts]
      parameters:
        - $ref: '#/components/parameters/PagingLimit'
        - $ref: '#/components/parameters/PagingCursor'
        - $ref: '#/components/parameters/SinceFilter'
        - $ref: '#/components/parameters/UseSystem'
        - $ref: '#/components/parameters/SortOrder'
      responses:
        '200':
          $ref: '#/components/responses/AccountsResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /accounts/{id}:
    get:
      description: |
        Use this request to get data for a single GL account that is stored in
        Vic.ai.
      summary: Info for a specific account
      operationId: getAccount
      tags: [Accounts]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
      responses:
        '200':
          $ref: '#/components/responses/AccountResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
    put:
      description: |
        Use this request to *upsert* GL account data for one GL account into
        Vic.ai.
        If the account is known by Vic.ai, the externalId supplied will be used
        to resolve the account and perform an update of the data, otherwise, a
        new account will be inserted.
        If the upsert action is part of a syncRequest, you should include the
        syncRequest ID in the `X-Request-Id` header.
      summary: Upserts an account
      operationId: upsertAccount
      tags: [Accounts]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
        - $ref: '#/components/parameters/RequestId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpsert'
      responses:
        '201':
          $ref: '#/components/responses/AccountUpsertedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: |
        Use this request to delete data for a single account that is stored in
        Vic.ai
      summary: Deletes an account
      operationId: deleteAccount
      tags: [Accounts]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
      responses:
        '201':
          $ref: '#/components/responses/AccountDeletedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /dimensions:
    get:
      description: |
        Use this request to query the dimensions data that are stored in Vic.ai.
      summary: List all dimensions
      operationId: listDimensions
      tags: [Dimensions]
      parameters:
        - $ref: '#/components/parameters/PagingLimit'
        - $ref: '#/components/parameters/PagingCursor'
        - $ref: '#/components/parameters/SinceFilter'
        - $ref: '#/components/parameters/UseSystem'
        - $ref: '#/components/parameters/SortOrder'
      responses:
        '200':
          $ref: '#/components/responses/DimensionsResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
    post:
      description: Create a new dimension in Vic.ai.
      summary: Create a dimension
      operationId: createDimension
      tags: [Dimensions]
      requestBody:
        $ref: '#/components/requestBodies/CreateDimensionRequest'
      responses:
        '201':
          $ref: '#/components/responses/DimensionCreatedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /dimensions/{id}:
    get:
      description: |
        Use this request to get data for a single dimension that is stored in
        Vic.ai.
      summary: Info for a specific dimension
      operationId: getDimension
      tags: [Dimensions]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
      responses:
        '200':
          $ref: '#/components/responses/DimensionResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
    put:
      description: |
        Use this request to update or insert dimensions data for one dimension
        into Vic.ai.
        **Note:** The insert portion of this will be changed to no longer
        function and the `createDimension` operation should be used instead.
        If the dimension is known by Vic.ai, the `externalId` supplied will be
        used to resolve the dimension and perform an update of the data,
        otherwise, a new dimension will be inserted.
        If the upsert action is part of a `syncRequest`, you should include the
        `syncRequest` ID in the `X-Request-Id` header.
      summary: Upserts a dimension
      operationId: upsertDimension
      tags: [Dimensions]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
        - $ref: '#/components/parameters/RequestId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DimensionUpsert'
      responses:
        '200':
          $ref: '#/components/responses/DimensionUpdatedResponse'
        '201':
          $ref: '#/components/responses/DimensionCreatedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: Use this request to delete data for a single dimension that is
        stored in Vic.ai
      summary: Deletes a dimension
      operationId: deleteDimension
      tags: [Dimensions]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
      responses:
        '201':
          $ref: '#/components/responses/DimensionDeletedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /vendors:
    get:
      description: Use this request to query the vendor data that are stored in Vic.ai.
      summary: List all vendors
      operationId: listVendors
      tags: [Vendor groups]
      parameters:
        - $ref: '#/components/parameters/PagingLimit'
        - $ref: '#/components/parameters/PagingCursor'
        - $ref: '#/components/parameters/SinceFilter'
        - $ref: '#/components/parameters/VendorConfirmedFilter'
        - $ref: '#/components/parameters/VendorUnconfirmedFilter'
        - $ref: '#/components/parameters/UseSystem'
        - $ref: '#/components/parameters/SortOrder'
        - name: state
          in: query
          description: |
            Filter vendors by state.
            - `PENDING` - The vendor is not confirmed, has no errors, and was
              not predicted. It is pending to be confirmed.
            - `ACTIVE` - The vendor is confirmed and has no errors.
            - `PREDICTED` - The vendor was predicted by Vic.
            - `ERRORED` - The vendor has errors set.
          required: false
          schema:
            $ref: '#/components/schemas/VendorStateFilter'
      responses:
        '200':
          $ref: '#/components/responses/VendorsResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /vendors/{id}:
    get:
      description: Use this request to get data for a single vendor that is stored
        in Vic.ai.
      summary: Info for a specific vendor
      operationId: getVendor
      tags: [Vendors]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
      responses:
        '200':
          $ref: '#/components/responses/VendorResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
    put:
      description: |
        Updates or inserts a vendor into the Vic.ai system.
        All fields passed are set on the vendor. All fields that are omitted
        from the request body are considered to be null and will be set to null.
        If the vendor is known by Vic.ai, the `externalId` supplied will be used
        to resolve the vendor and perform an update of the data, otherwise, a
        new vendor will be inserted.
        If the upsert action is part of a `syncRequest`, you should include the
        `syncRequest` ID in the `X-Request-Id` header.
      summary: Upserts a vendor
      operationId: upsertVendor
      tags: [Vendors]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
        - $ref: '#/components/parameters/RequestId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VendorUpsert'
      responses:
        '200':
          $ref: '#/components/responses/VendorUpdatedResponse'
        '201':
          $ref: '#/components/responses/VendorCreatedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: |
        Use this request to delete data for a single vendor that is stored in
        Vic.ai
      summary: Deletes a vendor
      operationId: deleteVendor
      tags: [Vendors]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
      responses:
        '201':
          $ref: '#/components/responses/VendorDeletedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /vendors/{id}/errors:
    post:
      description: |
        Use this post to report vendor update failure errors back to Vic.ai.
        Strictly a response to the callbacks.
        * The `X-Request-Id` header is required.
        * The `id` MUST be a Vendor `internalId`.
      summary: Completes the response callback cycle resulting from a 202
      operationId: setVendorRemoteErrors
      tags: [Vendors]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/RequestId'
        - $ref: '#/components/parameters/UseSystem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetVendorRemoteErrors'
      responses:
        '200':
          $ref: '#/components/responses/VendorRemoteErrorsUpdatedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
    delete:
      summary: Clears errors on the Vendor.
      description: Used to clear errors that have been fixed in the ERP system.
      operationId: clearVendorRemoteErrors
      tags: [Vendors]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/RequestId'
        - $ref: '#/components/parameters/UseSystem'
      responses:
        '200':
          $ref: '#/components/responses/VendorRemoteErrorsClearedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /vendorGroups:
    get:
      description: List all vendor groups.
      summary: List all vendor groups
      operationId: listVendorGroups
      tags: [Vendor groups]
      parameters:
        - $ref: '#/components/parameters/PagingLimit'
        - $ref: '#/components/parameters/PagingCursor'
      responses:
        '200':
          $ref: '#/components/responses/VendorGroupsResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
    post:
      description: Create a vendor group.
      summary: Create a vendor group
      operationId: createVendorGroup
      tags: [Vendor groups]
      requestBody:
        $ref: '#/components/requestBodies/CreateVendorGroupRequest'
      responses:
        '201':
          $ref: '#/components/responses/VendorGroupResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /vendorGroups/{id}:
    put:
      description: Update the vendor group.
      summary: Update the vendor group
      operationId: updateVendorGroup
      tags: [Vendor groups]
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the vendor group
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: '#/components/requestBodies/UpdateVendorGroupRequest'
      responses:
        '200':
          $ref: '#/components/responses/VendorGroupResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: Delete vendor group.
      summary: Delete vendor group
      operationId: deleteVendorGroup
      tags: [Vendors]
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the vendor group
          schema:
            type: string
            format: uuid
      responses:
        '204':
          $ref: '#/components/responses/VendorGroupDeletedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /attachments:
    post:
      description: |
        Use this to upload an attachment to Vic.ai. The attachment will be created and processing enqueued automatically.

        The response is a 201 with the attachment ID.
      summary: Upload an attachment
      operationId: uploadAttachment
      tags: [Attachments]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          $ref: '#/components/responses/AttachmentCreatedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /invoices:
    get:
      description: |
        Use this request to query the invoice data that are stored in Vic.ai.
      summary: List all invoices
      operationId: listInvoices
      tags: [Invoices]
      parameters:
        - $ref: '#/components/parameters/PagingLimit'
        - $ref: '#/components/parameters/PagingCursor'
        - $ref: '#/components/parameters/UseSystem'
        - $ref: '#/components/parameters/SinceFilter'
        - $ref: '#/components/parameters/SortOrder'
        - $ref: '#/components/parameters/InvoiceStateFilter'
      responses:
        '200':
          $ref: '#/components/responses/InvoicesResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
    post:
      summary: Create an invoice.
      description:
        $ref: 'docs/create_invoice.md'
      operationId: createInvoice
      tags: [Invoices]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInvoice'
      responses:
        '201':
          $ref: '#/components/responses/InvoiceCreatedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
  /invoices/{id}:
    get:
      description: |
        Use this request to get data for a single invoice that is stored in
        Vic.ai
      summary: Info for a specific invoice
      operationId: getInvoice
      tags: [Invoices]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
      responses:
        '200':
          $ref: '#/components/responses/InvoiceResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
    patch:
      description: |
        Use this request to indicate that an invoice has been posted or
        transferred to the ERP system, in the case where you have not activated
        a subscription, or you have responded to the subscription with a
        202-asynchronous response.
        Note that this operation can either be a confirmation, or a rejection,
        depending on the shape of the payload.
        Possible payloads:
        - InvoiceConfirm: used to confirm that the invoice data have been
          successfully posted to the ERP, possibly including a postingError.
          - Use of this postingError means that the invoice data are posted, but
            some secondary content needs amendation in the ERP that cannot be
            performed from the vic user interface (for example: a problem
            uploading the posted document).
        - InvoiceReject: used to communicate that the invoice data have NOT been
          successfully posted to the ERP, due to invalid data. This should NOT
          be used to communicate an error in posting due to a general failure
          such as a network issue or an availability issue with the ERP, in
          those or similar cases, a retry should be performed without notifying the vic system.
        Currently unsupported:
        - InvoiceClearError: the error set in an `InvoiceConfirm` operation
          should be cleared because the postingError has been resolved in the
          ERP. This cannot be used to clear an error due to `InvoiceReject`.
        Note that `:id` *must* be internalId for this route.
      summary: Asynchronous reply to invoice post or invoice transfer
      operationId: ackInvoice
      tags: [Invoices]
      parameters:
        - name: id
          in: path
          required: true
          description: |
            The `internalId` of the invoice which should be confirmed.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/InvoiceConfirm'
                - $ref: '#/components/schemas/InvoiceReject'
      responses:
        '201':
          $ref: '#/components/responses/InvoiceResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: |
        Use this request to delete data for a single invoice that is stored in
        Vic.ai
      summary: Deletes an invoice
      operationId: deleteInvoice
      tags: [Invoices]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
        - $ref: '#/components/parameters/Comment'
      responses:
        '204':
          $ref: '#/components/responses/InvoiceDeletedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /invoices/{id}/process:
    post:
      summary: Start the invoice processing.
      description: |
        Tells Vic that the invoice is ready to start being processed. Once this
        is called, it may not be called again.
      operationId: startProcessingInvoice
      tags: [Invoices]
      parameters:
        - $ref: '#/components/parameters/UseSystem'
        - name: id
          in: path
          required: true
          description: The Invoice internal id or external id.
          schema:
            type: string
      responses:
        '202':
          $ref: '#/components/responses/InvoiceResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
  /invoices/{id}/document:
    get:
      description: |
        Use this request to get the document associated with a single invoice
        that is stored in Vic.ai
      summary: Document for a specific invoice
      operationId: getInvoiceDocument
      tags: [Invoices]
      parameters:
        - $ref: '#/components/parameters/UseSystem'
        - name: id
          in: path
          required: true
          description: The Invoice internal id or external id.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/InvoiceDocumentResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
    post:
      summary: Upload document invoice
      description: |
        This attaches a document to the invoice for processing. An external id
        must be specified for an invoice prior to calling this.
        * Once an invoice has been processed, you may not attach a new document.
        * Once a document has been attached to an invoice, it may not be
          changed.
        **NOTE:** The maximum file size allowed is 64MB.
      operationId: uploadDocumentInvoice
      tags: [Invoices]
      parameters:
        - $ref: '#/components/parameters/UseSystem'
        - name: id
          in: path
          required: true
          description: The Invoice internal id or external id.
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [document]
              properties:
                document:
                  type: string
                  format: binary
      responses:
        '200':
          $ref: '#/components/responses/InvoiceResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
  /invoices/{id}/confirm:
    post:
      description: |
        Used to confirm that the invoice data have been successfully posted to
        the ERP, possibly including a `postingError`.
        Use of this `postingError` means that the invoice data are posted, but
        some secondary content needs amendation in the ERP that cannot be
        performed from the vic user interface (for example: a problem
        uploading the posted document).
        Note: `id` *must* be the `internalId` of the invoice.
      summary: Asynchronous reply to invoice post or invoice transfer
      operationId: confirmInvoice
      tags: [Invoices]
      parameters:
        - name: id
          in: path
          required: true
          description: |
            The `internalId` of the invoice which should be confirmed.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceConfirm'
      responses:
        '200':
          $ref: '#/components/responses/InvoiceConfirmedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
  /invoices/{id}/reject:
    post:
      description: |
        Used to communicate that the invoice data have **NOT** been
        successfully posted to the ERP, due to invalid data. This should **NOT**
        be used to communicate an error in posting due to a general failure
        such as a network issue or an availability issue with the ERP, in
        those or similar cases, a retry should be performed without notifying the vic system.
        Note: `id` *must* be the `internalId` of the invoice.
      summary: Asynchronous reply to invoice post
      operationId: rejectInvoice
      tags: [Invoices]
      parameters:
        - name: id
          in: path
          required: true
          description: |
            The `internalId` of the invoice which should be confirmed.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceReject'
      responses:
        '200':
          $ref: '#/components/responses/InvoiceRejectedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
  /invoices/{id}/lineItems:
    get:
      description: |
        List all of the line items for the invoice.
        NOTE: They are ungrouped so that you may inspect and modify them as
        necessary.
      summary: line items for a specific invoice
      operationId: getInvoicelineItems
      tags: [Invoices]
      parameters:
        - $ref: '#/components/parameters/UseSystem'
        - name: id
          in: path
          required: true
          description: The Invoice internal id or external id.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/InvoiceLineItemsResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /trainingInvoices:
    get:
      description: |
        Use this request to query the training invoice data that are stored in Vic.ai.
      summary: List all training invoices
      operationId: listTrainingInvoices
      tags: [Invoices for training]
      parameters:
        - $ref: '#/components/parameters/PagingLimit'
        - $ref: '#/components/parameters/PagingCursor'
        - $ref: '#/components/parameters/SinceFilter'
        - $ref: '#/components/parameters/SortOrder'
      responses:
        '200':
          $ref: '#/components/responses/TrainingInvoicesResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /trainingInvoices/{id}:
    get:
      description: |
        Use this request to get data for a single training invoice that is
        stored in Vic.ai
      summary: Info for a specific training invoice
      operationId: getTrainingInvoice
      tags: [Invoices for training]
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        '200':
          $ref: '#/components/responses/TrainingInvoiceResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
    put:
      description:
        $ref: 'docs/upsert_training_invoice.md'
      summary: Upserts a training invoice
      operationId: upsertTrainingInvoice
      tags: [Invoices for training]
      parameters:
        - $ref: '#/components/parameters/PathId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [invoiceData]
              properties:
                invoiceData:
                  $ref: '#/components/schemas/TrainingInvoiceUpsert'
                invoiceDocument:
                  type: string
                  format: binary
            encoding:
              invoiceData:
                contentType: application/json
                headers:
                  Content-Type:
                    required: true
                    schema:
                      type: string
              invoiceDocument:
                contentType: application/pdf, image/png, image/tiff, application/vnd.openxmlformats-officedocument.wordprocessingml.document
                headers:
                  Content-Type:
                    required: true
                    schema:
                      type: string
      responses:
        '201':
          $ref: '#/components/responses/TrainingInvoiceUpsertedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: |
        Use this request to delete data for a single training invoice that is
        stored in Vic.ai
      summary: Deletes a training invoice
      operationId: deleteTrainingInvoice
      tags: [Invoices for training]
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        '201':
          $ref: '#/components/responses/TrainingInvoiceDeletedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /trainingInvoices/{id}/document:
    get:
      description: |
        Use this request to get the document associated with a training invoice
        that is stored in Vic.ai
      summary: Document for a specific training invoice
      operationId: getTrainingInvoiceDocument
      tags: [Invoices for training]
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        '200':
          $ref: '#/components/responses/TrainingInvoiceDocumentResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /vatCodes:
    get:
      description: |
        Use this request to query all the VAT code data that are stored in
        Vic.ai.
      summary: List all VAT codes
      operationId: listVatCodes
      tags: [VAT codes]
      parameters:
        - $ref: '#/components/parameters/PagingLimit'
        - $ref: '#/components/parameters/PagingCursor'
        - $ref: '#/components/parameters/SinceFilter'
        - $ref: '#/components/parameters/SortOrder'
        - $ref: '#/components/parameters/VatCodeFilter'
      responses:
        '200':
          $ref: '#/components/responses/VatCodesResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /vatCodes/{id}:
    get:
      description: |
        Use this request to get data for a single VAT code that is stored in
        Vic.ai
      summary: Info for a specific VAT code
      operationId: getVatCode
      tags: [VAT codes]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
      responses:
        '200':
          $ref: '#/components/responses/VatCodeResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
    put:
      description: |
        Use this request to *upsert* VAT code into Vic.ai.
        The request body should contain the VAT code object as JSON.
        If the VAT code is known by Vic.ai, the id supplied will be used to
        resolve the VAT code and perform an update of the data, otherwise, a new
        VAT code will be inserted.
      summary: Upserts a VAT code
      operationId: upsertVatCode
      tags: [VAT codes]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VatCodeUpsert'
      responses:
        '201':
          $ref: '#/components/responses/VatCodeUpsertedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: |
        Use this request to delete data for a single VAT code that is stored in
        Vic.ai
      summary: Deletes a VAT code
      operationId: deleteVatCode
      tags: [VAT codes]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
      responses:
        '201':
          $ref: '#/components/responses/VatCodeDeletedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /taxCodes:
    post:
      description: Creates a company's tax code
      summary: Creates a company's tax code
      operationId: createTaxCode
      tags: [Tax codes]
      requestBody:
        $ref: '#/components/requestBodies/CreateTaxCode'
      responses:
        '201':
          $ref: '#/components/responses/TaxCodeResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
    get:
      description: Get the list of tax codes for a company
      summary: Get the list of tax codes for a company
      operationId: getTaxCodes
      tags: [Tax codes]
      responses:
        '200':
          $ref: '#/components/responses/TaxCodeResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /subscription:
    get:
      description: |
        Get the current webhook subscription if one exists.
      summary: Get current webhook subscription
      operationId: getSubscription
      tags: [Webhooks]
      responses:
        '200':
          $ref: '#/components/responses/SubscriptionResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
    put:
      description: |
        This request is used to configure or modify a new subscription to user
        and automated actions.
        You must supply a callback url and set an access token that Vic.ai can
        use to authenticate itself in your system. Notifications of user actions
        will proceed via the documented schema.
        The callback url must be https.
      summary: Create new webhook subscription
      operationId: subscribe
      tags: [Webhooks]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionUpsert'
      responses:
        '201':
          $ref: '#/components/responses/SubscriptionUpsertedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
      callbacks:
        events:
          https://mycallbackurl.com/events:
            post:
              summary: An event has occurred in Vic
              description: |
                This is the end point where all newer `V1` events will be sent
                to. The integration must respond to this callback quickly and if
                necessary update the Vic system later.
                > **Note**: The callback timeout is 15 seconds. Once the timeout
                > has been reached, the request will be considered a failure and
                > a retry will be attempted.
                * All `2XX` responses will be treated as successful.
                * `401` and `403` responses will be treated as failures and be
                  retried with an exponential backoff. Once the retries have
                  been exhausted, the event is discarded.
                * All other `4XX` responses will be treated as successful. If
                  something is to be rejected, you will need to make the
                  appropriate calls to the Vic API to complete the asynchronous
                  handshake. Example: confirming or rejecting an invoice post.
                * All `5XX` responses will be treated as a failure and will be
                  retried with an exponential backoff. Once the retries have
                  been exhausted, the event is  discarded.
                * All events retried will be reattempted at least 5 times.
              parameters:
                - $ref: '#/components/parameters/SubscriptionToken'
                - $ref: '#/components/parameters/RequestId'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/WebhookEvent'
              responses:
                '2XX':
                  description: |
                    Event was received successfully. The body of the response
                    will be ignored.
                '4XX':
                  description: |
                    Event was received successfully. The body of the response
                    will be ignored.
                '5XX':
                  description: |
                    Event was not received and a retry will be attempted later.
                    The body of the response will be ignored.
        vendorNew:
          https://mycallbackurl.com/vendorNew:
            post:
              summary: User has added a new vendor in Vic.
              description: |
                This request is sent when a user in Vic.ai adds a new vendor to
                the system.
                Request body contains the vendor object.
                A 201 response indicates that the vendor object has been
                successfully persisted to the ERP, and it must contain the ERP's
                vendor object id as the externalId parameter.
                Any other response will be considered a failure, the vendor
                object `externalId` will not be specified, and the error message
                you specify will be surfaced to the user.
                A 400 response indicates a data validation error.
                *Note:* This callback will timeout after 15 seconds.
              parameters:
                - $ref: '#/components/parameters/SubscriptionToken'
                - $ref: '#/components/parameters/RequestId'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/VendorCallback'
              responses:
                '201':
                  description: Successful upsert
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/VendorConfirm'
                '202':
                  description: Acknowledge receipt
                  content:
                    application/json:
                      schema:
                        enum: [OK]
                '4XX':
                  description: |
                    Error when posting vendor.  If this is a generic error,
                    use the `Error` schema; if it's an error reported by the
                    ERP, use the `VendorError` schema.
                  content:
                    application/json:
                      schema:
                        oneOf:
                          - $ref: '#/components/schemas/Error'
                          - $ref: '#/components/schemas/VendorError'
                '5XX':
                  description: unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
        invoicePost:
          https://mycallbackurl.com/invoicePost:
            post:
              summary: User has selected to post an invoice to the ERP.
              description: |
                This request is sent when a user in Vic.ai posts an invoice
                object to the system.
                Request body contains the invoice object (`invoiceData` part) as
                JSON, and corresponding invoice documents as a pdf file
                (`invoicePayload` part) as multipart form data. This will always
                be a pdf file.
                A 201 response indicates that the invoice object has been
                successfully persisted to the ERP, and it must contain the ERP's
                invoice object id as the `externalId` parameter.
                A 202 response indicates that the receipt of the invoice object
                has been acknowledged; an asynchronous update will occur via
                `invoiceConfirm` and the supplied 'X-Request-Id' in the request
                header will be provided as the `X-Request-Id` header for any
                associated asynchronous updates.
                Any other response will be considered a failure, the invoice
                object `externalId` will not be specified, and the error message
                you specify will be surfaced to the user.
                A 400 response indicates a data validation error.
                This callback will timeout after 5 seconds; to prevent
                inconsistencies, if the request will take longer than 5 seconds,
                it is appropriate to respond with a 202 response code.
              parameters:
                - $ref: '#/components/parameters/SubscriptionToken'
                - $ref: '#/components/parameters/RequestId'
              requestBody:
                required: true
                content:
                  multipart/form-data:
                    schema:
                      type: object
                      properties:
                        invoiceData:
                          $ref: '#/components/schemas/Invoice'
                        invoiceDocument:
                          type: string
                          format: binary
                    encoding:
                      invoiceData:
                        contentType: application/json
                      invoiceDocument:
                        contentType: application/pdf
              responses:
                '201':
                  description: Successful upsert
                  content:
                    application/json:
                      schema:
                        oneOf:
                          - $ref: '#/components/schemas/InvoiceConfirm'
                '202':
                  description: Deferred post, confirmation asynchronous
                '4XX':
                  description: invalid invoice data
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
                '5XX':
                  description: unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
        invoiceTransfer:
          https://mycallbackurl.com/invoiceTransfer:
            post:
              summary: User has selected to transfer an invoice to the ERP.
              description: |
                This request is sent when a user in Vic.ai selects and invoice
                document and *transfers* it to the ERP.
                Note: there will be no Vic.ai generated invoice data sent with
                this a *transferred* invoice.
                Request body contains the invoice document.
                A 201 response indicates that the invoice document has been
                successfully transferred to the ERP, and it must contain the
                ERP's invoice document id as the externalId parameter.
                A 202 response indicates that the receipt of the invoice
                transfer has been acknowledged and an asynchronous update will
                occur via `invoiceConfirm` operation and the supplied
                `X-Request-Id` in the request header will be provided as the
                `X-Request-Id` header for any associated asynchronous updates.
                Any other response will be considered a failure, the invoice
                object `externalId` will not be specified, and the error message
                you specify will be surfaced to the user.
                A 400 response indicates a data validation error.
                This callback will timeout after 5 seconds and to prevent
                inconsistencies, if the request will take longer than 5 seconds,
                it is appropriate to respond with a 202 response code.
              parameters:
                - $ref: '#/components/parameters/SubscriptionToken'
                - $ref: '#/components/parameters/RequestId'
              requestBody:
                required: true
                content:
                  multipart/form-data:
                    schema:
                      type: object
                      properties:
                        invoiceData:
                          $ref: '#/components/schemas/Invoice'
                        invoiceDocument:
                          type: string
                          format: binary
                    encoding:
                      invoiceData:
                        contentType: application/json
                      invoiceDocument:
                        contentType: application/pdf
              responses:
                '201':
                  description: Successful upsert
                  content:
                    application/json:
                      schema:
                        enum: [OK]
                '202':
                  description: Deferred post, confirmation asynchronous
                '4XX':
                  description: Unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
        syncRequest:
          https://mycallbackurl.com/syncRequest:
            post:
              summary: A request to sync all masterdata.
              description: |
                This request is sent when a user in Vic.ai triggers a sync of all
                masterdata.
                In response to this message, you’re expected to post masterdata
                (vendors, GL accounts, dimensions) into Vic.ai using the
                respective routes. You may perform a partial update, determining
                which data to update using queries.
                The body of the `syncRequest` contains the `X-Request-Id` and
                this is a  token that should be returned with all upsert actions
                associated  with this `syncRequest`.
                A 200 response indicates that the request has been acknowledged
                and informs the user that the sync has been successfully triggered.
              parameters:
                - $ref: '#/components/parameters/SubscriptionToken'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/RequestIdCallback'
              responses:
                '200':
                  description: Request acknowledged
                '4XX':
                  description: Request unservicable
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
    delete:
      description: |
        This request is used to cancel a subscription to user actions. In
        conjunction with a post reqeust, you may use this as a first step to
        update subscription URLs or authorization tokens.
      summary: Delete webhook subscription
      operationId: unsubscribe
      tags: [Webhooks]
      responses:
        '201':
          $ref: '#/components/responses/SubscriptionDeletedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /purchaseOrders:
    get:
      description: List purchase orders.
      summary: List purchase orders
      operationId: listPurchaseOrders
      tags: [Purchase orders]
      parameters:
        - $ref: '#/components/parameters/PagingLimit'
        - $ref: '#/components/parameters/PagingCursor'
        - $ref: '#/components/parameters/SinceFilter'
        - $ref: '#/components/parameters/UptoFilter'
        - $ref: '#/components/parameters/PurchaseOrderStatusFilter'
      responses:
        '200':
          $ref: '#/components/responses/PurchaseOrdersResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
    post:
      description:
        $ref: 'docs/create_purchase_order.md'
      summary: Create a purchase order
      operationId: createPurchaseOrder
      tags: [Purchase orders]
      requestBody:
        $ref: '#/components/requestBodies/CreatePurchaseOrderRequest'
      responses:
        '201':
          $ref: '#/components/responses/PurchaseOrderResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
  /purchaseOrders/{purchaseOrderId}:
    get:
      description: Get a purchase order.
      summary: Get a purchase order
      operationId: getPurchaseOrder
      tags: [Purchase orders]
      parameters:
        - name: purchaseOrderId
          in: path
          required: true
          description: The internal id of the purchase order.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/PurchaseOrderResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
    put:
      description: |
        Update a purchase order.
        Once finished updating the purchase order you should also also call
        `processPurchaseOrder` to kick off reprocessing purchase order matching.
      summary: Update a purchase order
      operationId: updatePurchaseOrder
      tags: [Purchase orders]
      parameters:
        - name: purchaseOrderId
          in: path
          required: true
          description: The id of the purchase order.
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/UpdatePurchaseOrderRequest'
      responses:
        '200':
          $ref: '#/components/responses/PurchaseOrderResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
    delete:
      description: |
        Delete a purchase order.
        Once finished updating the purchase order you should also also call
        `processPurchaseOrder` to kick off reprocessing purchase order matching.
      summary: Delete a purchase order
      operationId: deletePurchaseOrder
      tags: [Purchase orders]
      parameters:
        - name: purchaseOrderId
          in: path
          required: true
          description: The internal id of the purchase order.
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/PurchaseOrderDeletedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
  /purchaseOrders/{purchaseOrderId}/process:
    post:
      description: |
        When the purchase order modifications are completed use this operation to let
        Vic know that it is ready to be processed.
        Once a purchase order is being processed, it can not be modified until
        completed.
      summary: Process the purchase order
      operationId: processPurchaseOrder
      tags: [Purchase orders]
      parameters:
        - name: purchaseOrderId
          in: path
          required: true
          description: The internal id of the purchase order.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/PurchaseOrderResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
  /purchaseOrders/{purchaseOrderId}/close:
    post:
      description: Closes a purchase order.
      summary: Close a purchase order
      operationId: closePurchaseOrder
      tags: [Purchase orders]
      parameters:
        - name: purchaseOrderId
          in: path
          required: true
          description: The internal id of the purchase order.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/PurchaseOrderResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
  /purchaseOrders/{purchaseOrderId}/open:
    post:
      description: Opens a purchase order.
      summary: Opens a purchase order
      operationId: openPurchaseOrder
      tags: [Purchase orders]
      parameters:
        - name: purchaseOrderId
          in: path
          required: true
          description: The internal id of the purchase order.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/PurchaseOrderResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
  /purchaseOrderLineItems:
    post:
      description:
        $ref: 'docs/create_purchase_order_line_item.md'
      summary: Add a line item to a purchase order.
      operationId: createPurchaseOrderLineItem
      tags: [Purchase orders]
      requestBody:
        $ref: '#/components/requestBodies/CreatePurchaseOrderLineItemRequest'
      responses:
        '201':
          $ref: '#/components/responses/PurchaseOrderLineItemResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
  /purchaseOrderLineItems/{purchaseOrderLineItemId}:
    put:
      description:
        $ref: 'docs/update_purchase_order_line_item.md'
      summary: Update a purchase order's line item
      operationId: updatePurchaseOrderLineItem
      tags: [Purchase orders]
      parameters:
        - name: purchaseOrderLineItemId
          in: path
          required: true
          description: The id of the purchase order line item.
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/UpdatePurchaseOrderLineItemRequest'
      responses:
        '200':
          $ref: '#/components/responses/PurchaseOrderLineItemResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
    delete:
      description:
        $ref: 'docs/delete_purchase_order_line_item.md'
      summary: Delete a purchase order's line item
      operationId: deletePurchaseOrderLineItem
      tags: [Purchase orders]
      parameters:
        - name: purchaseOrderLineItemId
          in: path
          required: true
          description: The id of the purchase order line item.
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/PurchaseOrderLineItemDeletedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
  /tags:
    get:
      description: |
        Get a list of tags.
        Tags are used to categorize entities. Currently the only entity that is
        taggable are Vendors using the `/vendorTags` endpoint. These are not the
        tags that are used to describe a group of companies.
      summary: Get a list of tags
      operationId: listTags
      tags: [Tags]
      responses:
        '200':
          $ref: '#/components/responses/TagListResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
    post:
      description: Create a new tag.
      summary: Create a new tag
      operationId: createTag
      tags: [Tags]
      requestBody:
        $ref: '#/components/requestBodies/CreateTagRequest'
      responses:
        '201':
          $ref: '#/components/responses/TagResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
  /tags/{id}:
    put:
      description: Update a tag.
      summary: Update a tag
      operationId: updateTag
      tags: [Tags]
      parameters:
        - $ref: '#/components/parameters/TagId'
      requestBody:
        $ref: '#/components/requestBodies/UpdateTagRequest'
      responses:
        '200':
          $ref: '#/components/responses/TagResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
    delete:
      description: |
        Delete a tag. If you delete a tag, any entities that the tags is
        attached to will be deleted as well. This action can not be undone.
      summary: Delete a tag
      operationId: deleteTag
      tags: [Tags]
      parameters:
        - $ref: '#/components/parameters/TagId'
      responses:
        '204':
          $ref: '#/components/responses/TagDeletedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /vendorTags:
    get:
      description: |
        Get a list of vendor tags.
      summary: Get a list of vendor tags
      operationId: listVendorTags
      tags: [Vendor tags]
      responses:
        '200':
          $ref: '#/components/responses/VendorTagListResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
    post:
      description: |
        Create a new vendor tag. A vendor is not allowed to have the same tag
        attached multiple times.
      summary: Create a new vendor tag
      operationId: createVendorTag
      tags: [Vendor tags]
      requestBody:
        $ref: '#/components/requestBodies/CreateVendorTagRequest'
      responses:
        '201':
          $ref: '#/components/responses/VendorTagResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
  /vendorTags/{id}:
    delete:
      description: Delete a vendor tag.
      summary: Delete a vendor tag
      operationId: deleteVendorTag
      tags: [Vendor tags]
      parameters:
        - $ref: '#/components/parameters/VendorTagId'
      responses:
        '204':
          $ref: '#/components/responses/VendorTagDeletedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /paymentTerms:
    get:
      description: |
        Get a list of payment terms.
      summary: Get a list of payment terms
      operationId: listPaymentTerms
      tags: [Payment terms]
      responses:
        '200':
          $ref: '#/components/responses/PaymentTermListResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
    post:
      description: |
        Create a new payment term.
      summary: Create a new payment term
      operationId: createPaymentTerm
      tags: [Payment terms]
      requestBody:
        $ref: '#/components/requestBodies/CreatePaymentTermRequest'
      responses:
        '201':
          $ref: '#/components/responses/PaymentTermResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
  /paymentTerms/{id}:
    put:
      description: |
        Update a payment term.
      summary: Update a payment term
      operationId: updatePaymentTerm
      tags: [Payment terms]
      parameters:
        - $ref: '#/components/parameters/PaymentTermId'
      requestBody:
        $ref: '#/components/requestBodies/UpdatePaymentTermRequest'
      responses:
        '200':
          $ref: '#/components/responses/PaymentTermResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
    delete:
      description: |
        Delete a payment term.
      summary: Delete a payment term
      operationId: deletePaymentTerm
      tags: [Payment terms]
      parameters:
        - $ref: '#/components/parameters/PaymentTermId'
      responses:
        '204':
          $ref: '#/components/responses/PaymentTermDeletedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /paymentBatches:
    get:
      description: List all payment batches.
      summary: List all payment batches
      operationId: listPaymentBatches
      tags: [Payment batches]
      parameters:
        - name: completedAtOrAfter
          in: query
          required: false
          description: |
            Filter batches that were completed at or after the date time
            provided. This can be used in combination with `completedAtOrBefore`.
          schema:
            type: string
            format: date-time
        - name: completedAtOrBefore
          in: query
          required: false
          description: |
            Filter batches that were completed at or before the date time
            provided. This can be used in combination with `completedAtOrAfter`.
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/PaymentBatchStatusFilter'
        - $ref: '#/components/parameters/PagingLimit'
        - $ref: '#/components/parameters/PagingCursor'
      responses:
        '200':
          $ref: '#/components/responses/PaymentBatchListResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
  /paymentBatches/{id}:
    get:
      description: |
        The batches returned may include payments and credits that could be
        `rejected` or `voided`. This is by design. If you are synchronizing with
        an ERP, it is most likely safe to discard the `rejected` payments or
        credits. When payments or credits are `voided`, this can happen for a
        variety of reasons.
        <br/> <br/>
        The payment provider can not process that payment due to an error.
        <br/>
        The vendor attached to that payment is missing required information or
        is no longer valid.
        <br/>
        A stop payment was issued outside of Vic and support has had to go
        remediate.
        <br/> <br/>
        By no means is this list exhaustive and if you have questions, please
        reach out to support.
      summary: Get a payment batch
      operationId: getPaymentBatch
      tags: [Payment batches]
      parameters:
        - $ref: '#/components/parameters/PaymentBatchId'
      responses:
        '200':
          $ref: '#/components/responses/PaymentBatchResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  headers:
    NextPageToken:
      description: A link to the next page of responses
      schema:
        type: string
  #
  # Shared Common Parameters
  #
  parameters:
    PathId:
      name: id
      in: path
      required: true
      description: The id of the database entry
      schema:
        type: string
    PagingLimit:
      name: limit
      in: query
      description: How many items to return at one time (max 100) (default 100)
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
    PagingCursor:
      name: cursor
      in: query
      description: Which item to start from. See [Pagination](#section/Pagination) for more information.
      required: false
      schema:
        type: string
    SinceFilter:
      name: since
      in: query
      description: |
        Datetime value for incremental updates.
        **NOTE**: For external datetimes, the expected format is not in UTC. for
        vic-internal datetimes (see `SinceIsExternal`) the format is UTC.
      required: false
      schema:
        type: string
        format: date-time
    UptoFilter:
      name: upto
      in: query
      description: |
        Datetime value for decremental updates.
      required: false
      schema:
        type: string
        format: date-time
    PaymentBatchId:
      name: id
      in: path
      description: The ID of the payment batch.
      required: true
      schema:
        type: string
    PaymentBatchStatusFilter:
      name: status
      in: query
      description: |
        Selects the payment batches that match the status provided. When left
        unspecified, it is the same as if `all` was specified.
      schema:
        anyOf:
          - $ref: '#/components/schemas/PaymentBatchStatus'
          - enum: [all]
    PurchaseOrderStatusFilter:
      name: status
      in: query
      description: selects the status of purchase orders which are to be searched
      required: false
      schema:
        $ref: '#/components/schemas/PurchaseOrderStatus'
    InvoiceStateFilter:
      name: state
      in: query
      description: |
        selects the state of invoices which are to be searched
        (defaults to `POSTED`)
      required: false
      schema:
        anyOf:
          - $ref: '#/components/schemas/InvoiceState'
          - enum: [ALL, POSTED]
    VendorConfirmedFilter:
      name: confirmed
      in: query
      description: selects if confirmed vendors are to be displayed.
      required: false
      schema:
        type: boolean
        default: true
    VendorUnconfirmedFilter:
      name: unconfirmed
      in: query
      description: selects if unconfirmed vendors are to be displayed.
      required: false
      schema:
        type: boolean
        default: true
    VatCodeFilter:
      name: vatCode
      in: query
      description: selects the VAT code which is to be displayed
      required: false
      schema:
        type: string
    Comment:
      name: comment
      in: query
      description: selects the comment which is to be displayed
      required: false
      schema:
        oneOf:
          - type: string
            maxLength: 255
          - type: 'null'
    UseSystem:
      name: useSystem
      in: query
      description: |
        Which system to use for id or updatedAt filters.
      required: false
      schema:
        type: string
        enum: [INTERNAL, EXTERNAL, internal, external]
        default: EXTERNAL
    SortOrder:
      name: sortOrder
      in: query
      description: what sort order should be used for queries
      required: false
      schema:
        type: string
        enum: [ASCENDING, DESCENDING]
        default: ASCENDING
    RequestId:
      in: header
      name: X-Request-Id
      description: token to be able to correctly log associated requests
      required: false
      schema:
        type: string
        format: uuid
    SubscriptionToken:
      in: header
      name: Authorization
      description: |
        The token provided for the `Subscription`.
        The header will appear as follows `Bearer YOURTOKEN`.
      example: Bearer abc123mysecrettoken456def
      required: false
      schema:
        type: string
    TagId:
      name: id
      in: path
      required: true
      description: The id of the tag
      schema:
        type: string
    VendorTagId:
      name: id
      in: path
      required: true
      description: The id of the vendor tag
      schema:
        type: string
    PaymentTermId:
      name: id
      in: path
      required: true
      description: The id of the payment term
      schema:
        type: string
  #
  # Shared Schemas
  #
  schemas:
    InternalId:
      description: The internal id Vic uses for the record.
      type: string
      example: '47'
      readOnly: true
    ExternalId:
      description: |
        The external id set by the ERP system. It does not have to be a UUID and
        can be any non empty string desired.
      type: string
      example: 21b31bc7-1267-4335-893c-d7fe4706a238
      maxLength: 255
    Email:
      type: string
      format: email
      maxLength: 255
    CountryCode:
      description: |
        The ISO-3166 country code. The acceptable values are Alpha-2 codes.
      type: string
      format: ISO-3166
      maxLength: 2
      example: US
    Currency:
      description: The ISO-4217 currency code.
      type: string
      format: ISO-4217
      maxLength: 3
      example: USD
    MonetaryValue:
      description: |
        The monetary value as a string.
        A float **should not** be used. The api will accept a float and it will be
        transformed into a monetary value, but for best results please use a string
        with the proper decimal precision.
      type: string
      format: decimal
      example: '1.00'
    ExternalData:
      description: A free form json object that is stored with the record.
      type: object
    HealthCheck:
      type: object
      required: [status, version, company]
      properties:
        status:
          type: string
          enum: [PASS, FAIL, WARN]
        version:
          type: string
          format: semver
        company:
          type: string
    Account:
      type: object
      required: [number, name, internalId, internalUpdatedAt]
      properties:
        internalId:
          $ref: '#/components/schemas/InternalId'
        internalUpdatedAt:
          type: string
          description: Is in UTC.
          format: date-time
        externalId:
          $ref: '#/components/schemas/ExternalId'
        externalUpdatedAt:
          type: string
          format: date-time
          description: Does not have UTC normalization.
          example: '2021-06-29T17:20:53.154'
        number:
          type: string
          format: number
        name:
          type: string
          maxLength: 255
        externalData:
          oneOf:
            - $ref: '#/components/schemas/ExternalData'
            - type: 'null'
    AccountUpsert:
      type: object
      required: [number, name, externalUpdatedAt]
      properties:
        externalId:
          $ref: '#/components/schemas/ExternalId'
        externalUpdatedAt:
          type: string
          format: date-time
          description: Does not have UTC normalization.
          example: '2021-06-29T17:20:53.154'
        number:
          type: string
          format: number
        name:
          type: string
          maxLength: 255
        externalData:
          oneOf:
            - $ref: '#/components/schemas/ExternalData'
            - type: 'null'
    Accounts:
      type: array
      items:
        $ref: '#/components/schemas/Account'
    BankAccountType:
      description: The type of bank account.
      enum: [ach, iban, bban, plusgiro, bankgiro]
    Dimension:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
          description: The name of the dimension.
        type:
          type: string
          maxLength: 255
          description: The dimension type.
        typeName:
          type: string
          maxLength: 255
          description: The dimension type name. A human friendly type name.
        typeExternalId:
          type: string
          maxLength: 255
          description: The dimension type's external ID in the ERP system.
        shortName:
          type: string
          maxLength: 255
        externalData:
          oneOf:
            - $ref: '#/components/schemas/ExternalData'
            - type: 'null'
        displayName:
          type: string
        internalId:
          $ref: '#/components/schemas/InternalId'
        internalUpdatedAt:
          type: string
          description: Is in UTC.
          format: date-time
        externalId:
          $ref: '#/components/schemas/ExternalId'
        externalUpdatedAt:
          type: string
          format: date-time
          description: Does not have UTC normalization.
          example: '2021-06-29T17:20:53.154'
    CreateDimension:
      type: object
      required: [externalUpdatedAt, name]
      properties:
        externalId:
          $ref: '#/components/schemas/ExternalId'
        externalUpdatedAt:
          type: string
          format: date-time
          description: Does not have UTC normalization.
          example: '2021-06-29T17:20:53.154'
        name:
          type: string
          maxLength: 255
          description: The name of the dimension.
        type:
          type: string
          maxLength: 255
          description: The dimension type.
        typeName:
          type: string
          maxLength: 255
          description: The dimension type name.
        typeExternalId:
          type: string
          maxLength: 255
          description: |
            The type's external ID in the ERP system. If left unspecified, it
            will clear the existing value.
        shortName:
          type: string
          maxLength: 255
        externalData:
          oneOf:
            - $ref: '#/components/schemas/ExternalData'
            - type: 'null'
    DimensionUpsert:
      type: object
      required: [externalUpdatedAt, name]
      properties:
        externalId:
          $ref: '#/components/schemas/ExternalId'
        externalUpdatedAt:
          type: string
          format: date-time
          description: Does not have UTC normalization.
          example: '2021-06-29T17:20:53.154'
        name:
          type: string
          maxLength: 255
          description: The name of the dimension.
        type:
          type: string
          maxLength: 255
          description: The dimension type.
        typeName:
          type: string
          maxLength: 255
          description: The dimension type name.
        typeExternalId:
          type: string
          maxLength: 255
          description: |
            The type's external ID in the ERP system. If left unspecified, it
            will clear the existing value.
        shortName:
          type: string
          maxLength: 255
        externalData:
          oneOf:
            - $ref: '#/components/schemas/ExternalData'
            - type: 'null'
    Dimensions:
      type: array
      items:
        $ref: '#/components/schemas/Dimension'
    DimensionRef:
      type: object
      description: |
        A reference to a dimension within Vic.
        The `internalId` takes precedence over all fields specified. If a
        dimension is not found matching the `internalId` an error will be
        returned.
        When `externalId` is provided, it takes precedence over `name` and can
        be used in combination with `typeExternalId`.
        If `name` is the only field specified and more than one dimension exists
        with that `name`, then an error will be returned. It can be used in
        combination with `typeExternalId`.
        If `typeExternalId` is specified with `externalId` or `name` and more
        than one dimension exists with those fields, then an error will be
        returned.
      properties:
        internalId:
          oneOf:
            - type: string
              maxLength: 255
              description: |
                Vic's id of the dimension.
                Takes precedence over all other fields. Other fields are ignored if
                this is specified.
            - type: 'null'
        externalId:
          oneOf:
            - type: string
              maxLength: 255
              description: |
                The id of the dimension in the ERP.
                Takes precedence over `name`. Can be used in combination with
                `typeExternalId`.
                If more than one dimension is found meeting the criteria specified,
                an error will be returned.
            - type: 'null'
        name:
          oneOf:
            - type: string
              maxLength: 255
              description: |
                The name of the dimension.
                Can be used in combination with `typeExternalId`.
                If more than one dimension is found meeting the criteria specified,
                an error will be returned.
            - type: 'null'
        typeExternalId:
          oneOf:
            - type: string
              maxLength: 255
              description: |
                The type id in the ERP.
                This is a supplemental field to be used with `externalId` or `name`.
            - type: 'null'
    CreditAccountRef:
      type: object
      properties:
        internalId:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        externalId:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
    CostAccountInfo:
      type: object
      properties:
        internalId:
          oneOf:
            - type: string
              maxLength: 255
              description: The cost account's internal id.
            - type: 'null'
        externalId:
          oneOf:
            - type: string
              maxLength: 255
              description: The cost account's external id.
            - type: 'null'
        number:
          oneOf:
            - type: string
              maxLength: 255
              description: The cost account's number.
            - type: 'null'
    CreditStatus:
      type: string
      enum: [pending_approval, rejected, approved, acknowledged, voided]
    Credit:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The id of the credit.
        amount:
          $ref: '#/components/schemas/MonetaryValue'
        settlementAmount:
          $ref: '#/components/schemas/MonetaryValue'
        currencyId:
          $ref: '#/components/schemas/Currency'
        settlementCurrencyId:
          $ref: '#/components/schemas/Currency'
        exchangeRate:
          $ref: '#/components/schemas/MonetaryValue'
        status:
          $ref: '#/components/schemas/CreditStatus'
        approvedAt:
          oneOf:
            - type: string
              format: date-time
              description: The payment approver has approved the credit.
            - type: 'null'
        fundedAt:
          oneOf:
            - type: string
              format: date-time
              description: |
                The date time the payment request began to be processed.
                
                **Note**: This is not the actual date time that the funds were
                withdrawn from the bank. The payment request can take 15
                minutes to 4 hours or more to be processed. See the `acceptedAt`
                field for the date time that the payment was submitted and
                accepted.
            - type: 'null'
        acceptedAt:
          oneOf:
            - type: string
              format: date-time
              description: |
                The date time the payment request was submitted and accepted
                for processing.
            - type: 'null'
        rejectedAt:
          oneOf:
            - type: string
              format: date-time
              description: The payment approver has rejected the credit payment.
            - type: 'null'
        voidedAt:
          oneOf:
            - type: string
              format: date-time
              description: |
                This is set when a credit has been voided by the payment processor.
                Generally this would happen due to a `Vendor` missing address
                information or a malformed `Invoice` was trying to be paid. Other
                cases could cause this to be voided due to insufficient funds.
            - type: 'null'
        invoice:
          $ref: '#/components/schemas/InvoiceRef'
        vendor:
          $ref: '#/components/schemas/VendorRef'
    PaymentKind:
      type: string
      description: The payment kind.
      enum: [ACH, CHECK, IBAN, BBAN, PLUSGIRO, BANKGIRO]
    PaymentBatchStatus:
      type: string
      description: The status of the payment batch.
      enum: [pending_approval, rejected, approved, voided]
    PaymentStatus:
      type: string
      enum: [pending_approval, rejected, approved, acknowledged, voided]
    Payment:
      type: object
      description: |
        The payment made for an `Invoice`. The `Account` assigned to the
        payment is where the funds are being debited from.
      properties:
        id:
          type: string
          format: uuid
          description: The id of the credit.
        amount:
          $ref: '#/components/schemas/MonetaryValue'
        settlementAmount:
          $ref: '#/components/schemas/MonetaryValue'
        discountAmount:
          description: |
            The discount amount applied using the `PaymentTerm` on the vendor.
            The `discountAmount + amount` should be equal to the `Invoice`
            amount due in most cases. Accountants are allowed to make partial
            payments. Typically when partial payments are made, `discountAmount`
            will be `0.00`.
          oneOf:
            - $ref: '#/components/schemas/MonetaryValue'
        currencyId:
          $ref: '#/components/schemas/Currency'
        settlementCurrencyId:
          $ref: '#/components/schemas/Currency'
        exchangeRate:
          $ref: '#/components/schemas/MonetaryValue'
        status:
          $ref: '#/components/schemas/PaymentStatus'
        approvedAt:
          oneOf:
            - type: string
              format: date-time
              description: The payment approver has approved the payment.
            - type: 'null'
        fundedAt:
          oneOf:
            - type: string
              format: date-time
              description: |
                The date time the payment request began to be processed.
                
                **Note**: This is not the actual date time that the funds were
                withdrawn from the bank. The payment request can take 15
                minutes to 4 hours or more to be processed. See the `acceptedAt`
                field for the date time that the payment was submitted and
                accepted.
            - type: 'null'
        acceptedAt:
          oneOf:
            - type: string
              format: date-time
              description: |
                The date time the payment request was submitted and accepted
                for processing.
            - type: 'null'
        rejectedAt:
          oneOf:
            - type: string
              format: date-time
              description: The payment approver has rejected the payment.
            - type: 'null'
        voidedAt:
          oneOf:
            - type: string
              format: date-time
              description: |
                This is set when a credit has been voided by the payment processor.
                Generally this would happen due to a `Vendor` missing address
                information or a malformed `Invoice` was trying to be paid. Other
                cases could cause this to be voided due to insufficient funds.
            - type: 'null'
        invoice:
          $ref: '#/components/schemas/InvoiceRef'
        costAccount:
          $ref: '#/components/schemas/CostAccountRef'
        vendor:
          $ref: '#/components/schemas/VendorRef'
    PaymentBatch:
      type: object
      description: A batch of payments made with Vic.
      properties:
        id:
          type: string
          format: uuid
          description: The id of the payment batch in Vic.
        name:
          type: string
          description: The name of the payment batch that the accountant has set.
        companyId:
          type: string
          description: The id of the `Company` in Vic.
        processedAt:
          oneOf:
            - type: string
              format: date-time
              description: |
                The date time of when the payment was sent to the payment
                processor.
            - type: 'null'
        completedAt:
          oneOf:
            - type: string
              format: date-time
              description: |
                The date time of when all of the payments have been submitted to
                the bank accounts.
            - type: 'null'
        approvedAt:
          oneOf:
            - type: string
              format: date-time
              description: |
                The payment approver has approved the batch of payments and will
                be scheduled to be processed.
            - type: 'null'
        rejectedAt:
          oneOf:
            - type: string
              format: date-time
              description: |
                This is set when the payment approver has rejected the entire
                batch of payments. Each `Payment` and `Credit` will have their
                `rejectedAt` fields also set.
            - type: 'null'
        voidedAt:
          oneOf:
            - type: string
              format: date-time
              description: |
                This is set when an entire batch of payments was voided.
                Generally this would happen due to a `Vendor` missing address
                information or a malformed `Invoice` was trying to be paid. Other
                cases could cause this to be voided due to insufficient funds.
            - type: 'null'
        status:
          $ref: '#/components/schemas/PaymentBatchStatus'
        payments:
          type: array
          items:
            $ref: '#/components/schemas/Payment'
        credits:
          type: array
          items:
            $ref: '#/components/schemas/Credit'
    PaymentBatches:
      type: array
      items:
        $ref: '#/components/schemas/PaymentBatch'
    InvoicePaymentInfo:
      type: object
      description: |
        The invoice payment information.
        The `kind` field is required in order to determine what payment
        information the invoice needs to use.
        All other fields are optional and should be filled out as best seen fit.
        For `BBAN`, `IBAN`, `PLUSGIRO`, and `BANKGIRO` numbers use the
        `accountNumber` field.
        When using `IBAN` you should specify `bic`.
      required: [kind]
      properties:
        kind:
          $ref: '#/components/schemas/PaymentKind'
        accountHolderName:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        accountNumber:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        routingNumber:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        bic:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
    InvoicePaymentTerm:
      type: object
      required: [count, unit]
      properties:
        count:
          type: integer
          minimum: 0
          description: The number of `unit` for the payment term.
        unit:
          $ref: '#/components/schemas/PaymentInfoTermUnit'
    LineItemVat:
      type: object
      properties:
        internalId:
          oneOf:
            - type: string
              maxLength: 255
              description: |
                The internal id of the VAT code. If specified, it will take
                precedence over the `externalId` and `code`.
            - type: 'null'
        externalId:
          oneOf:
            - type: string
              maxLength: 255
              description: |
                The external id of the VAT code. If specified, it will take
                precedence over the `code`.
            - type: 'null'
        code:
          oneOf:
            - type: string
              maxLength: 255
              description: The VAT code.
            - type: 'null'
        amount:
          oneOf:
            - $ref: '#/components/schemas/MonetaryValue'
            - type: 'null'
          description: |
            The amount of VAT. This will be added to the line item's total. If
            the VAT amount is unknown, this should be left `NULL` or
            unspecified.
        rate:
          oneOf:
            - $ref: '#/components/schemas/MonetaryValue'
            - type: 'null'
          description: |
            The amount of VAT percentage. If the VAT percentage is unknown, this
            should be left `NULL` or unspecified.
    CreatePaymentTerm:
      type: object
      required: [name, daysToPay]
      properties:
        name:
          oneOf:
            - type: string
              maxLength: 255
              description: The name of the payment term
            - type: 'null'
        daysToPay:
          type: integer
          minimum: 1
          description: The number of days the invoice should be paid in.
        description:
          oneOf:
            - type: string
              maxLength: 255
              description: A description of the payment term.
            - type: 'null'
        discountDays:
          oneOf:
            - type: integer
              minimum: 0
              description: |
                The number of days the invoice should be paid in to get a
                discount.
            - type: 'null'
        discountPercentage:
          oneOf:
            - type: string
              format: decimal
              description: |
                The discount percentage if paid within the number of discount
                days.
              minimum: 0
            - type: 'null'
    UpdatePaymentTerm:
      type: object
      required: [name, daysToPay]
      properties:
        name:
          oneOf:
            - type: string
              maxLength: 255
              description: The name of the payment term
            - type: 'null'
        daysToPay:
          type: integer
          minimum: 1
          description: The number of days the invoice should be paid in.
        description:
          oneOf:
            - type: string
              maxLength: 255
              description: A description of the payment term.
            - type: 'null'
        discountDays:
          oneOf:
            - type: integer
              minimum: 0
              description: |
                The number of days the invoice should be paid in to get a
                discount.
            - type: 'null'
        discountPercentage:
          oneOf:
            - type: string
              format: decimal
              minimum: 0
              description: |
                The discount percentage if paid within the number of discount
                days.
            - type: 'null'
    PaymentTerm:
      type: object
      required: [name, daysToPay]
      properties:
        id:
          type: string
          description: The payment term's id.
        name:
          type: string
          maxLength: 255
          description: The name of the payment term
        daysToPay:
          type: integer
          minimum: 1
          description: The number of days the invoice should be paid in.
        description:
          oneOf:
            - type: string
              maxLength: 255
              description: A description of the payment term.
            - type: 'null'
        discountDays:
          oneOf:
            - type: integer
              minimum: 0
              description: |
                The number of days the invoice should be paid in to get a
                discount.
            - type: 'null'
        discountPercentage:
          oneOf:
            - type: string
              format: decimal
              minimum: 0
              description: |
                The discount percentage if paid within the number of discount
                days.
            - type: 'null'
    CreateInvoiceLineItem:
      type: object
      required: [amount]
      properties:
        index:
          oneOf:
            - type: integer
              minimum: 0
              description: |
                A non-negative integer indicating where the line item is in the
                document. No two line items shall be allowed to have the same index.
                If unspecified, it will be inferred based on its position. If
                another line item has an index set, and the current line item is
                left null, it will take the next highest value.
            - type: 'null'
        amount:
          oneOf:
            - $ref: '#/components/schemas/MonetaryValue'
          description: |
            The line item total amount including all tax amounts. This is used
            to calculate the predicted total amount on the invoice in the UI.
        quantityInvoiced:
          oneOf:
            - type: string
              format: decimal
              description: The quantity of things that were invoiced.
            - type: 'null'
        comment:
          oneOf:
            - type: string
              maxLength: 255
              description: The line item comment.
            - type: 'null'
        description:
          oneOf:
            - type: string
              maxLength: 255
              description: The description of the line item.
            - type: 'null'
        billable:
          oneOf:
            - type: boolean
            - type: 'null'
        taxCodeId:
          oneOf:
            - type: string
              format: uuid
              description: ID of Tax Code to use for the line item.
            - type: 'null'
        vat:
          oneOf:
            - $ref: '#/components/schemas/LineItemVat'
            - type: 'null'
          description: |
            The VAT information for the specific line item.
            If this value is unknown, it should be left `NULL` or unspecified.
        costAccount:
          oneOf:
            - $ref: '#/components/schemas/CostAccountInfo'
            - type: 'null'
        dimensions:
          oneOf:
            - type: array
              items:
                $ref: '#/components/schemas/DimensionRef'
            - type: 'null'
        unitPrice:
          description: The price per unit of the item.
          oneOf:
            - $ref: '#/components/schemas/MonetaryValue'
            - type: 'null'
        number:
          description: The item number
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        lineType:
          oneOf:
            - $ref: '#/components/schemas/InvoiceItemLineType'
            - type: 'null'
    InvoiceInternalId:
      type: string
      description: The id of the `Invoice` in Vic.
      maxLength: 255
    InvoiceExternalId:
      type: string
      description: The id of the `Invoice` in the ERP.
      maxLength: 255
    InvoiceRef:
      type: object
      description: A reference to an `Invoice`.
      properties:
        internalId:
          oneOf:
            - $ref: '#/components/schemas/InvoiceInternalId'
            - type: 'null'
        externalId:
          oneOf:
            - $ref: '#/components/schemas/InvoiceExternalId'
            - type: 'null'
    CostAccountRef:
      type: object
      description: A reference to a `Account`.
      properties:
        internalId:
          oneOf:
            - type: string
              maxLength: 255
              description: The id of the `Account` in Vic.
            - type: 'null'
        externalId:
          oneOf:
            - type: string
              maxLength: 255
              description: The id of the `Account` in the ERP.
            - type: 'null'
    VendorInternalId:
      type: string
      description: The id of the `Vendor` in Vic.
      maxLength: 255
    VendorExternalId:
      description: The id of the `Vendor` in the ERP.
      type: string
      maxLength: 255
    VendorRef:
      type: object
      description: A reference to a `Vendor`.
      properties:
        internalId:
          oneOf:
            - $ref: '#/components/schemas/VendorInternalId'
            - type: 'null'
        externalId:
          oneOf:
            - $ref: '#/components/schemas/VendorExternalId'
            - type: 'null'
    VendorLookupByInternalId:
      type: object
      required:
        - internalId
      properties:
        internalId:
          $ref: '#/components/schemas/VendorInternalId'
    VendorLookupByExternalId:
      type: object
      required:
        - externalId
      properties:
        externalId:
          $ref: '#/components/schemas/VendorExternalId'
    VendorLookupByName:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 255
          description: |
            The exact name of the vendor. This is a case sensitive match.
    VendorLookupByOrgNumberAndBankAccount:
      type: object
      required:
        - orgNumber
        - countryCode
        - bankAccount
        - bankAccountType
      properties:
        orgNumber:
          type: string
          maxLength: 255
          description: The org number of the vendor to aid in the predictions.
        countryCode:
          $ref: '#/components/schemas/CountryCode'
        bankAccount:
          type: string
          maxLength: 255
          description: The bank account number that is attached to the vendor.
        bankAccountType:
          $ref: '#/components/schemas/BankAccountType'
          description: The type of bank account the bank account number is.
    VendorLookupByOrgNumber:
      type: object
      required:
        - orgNumber
      properties:
        orgNumber:
          type: string
          maxLength: 255
          description: The org number of the vendor to aid in the predictions.
        countryCode:
          oneOf:
            - $ref: '#/components/schemas/CountryCode'
            - type: 'null'
          description: The country code of the vendor.
    VendorLookup:
      type: object
      oneOf:
        - $ref: '#/components/schemas/VendorLookupByInternalId'
        - $ref: '#/components/schemas/VendorLookupByExternalId'
        - $ref: '#/components/schemas/VendorLookupByName'
        - $ref: '#/components/schemas/VendorLookupByOrgNumberAndBankAccount'
        - $ref: '#/components/schemas/VendorLookupByOrgNumber'
    Language:
      type: string
      maxLength: 2
      example: en
    CreateInvoice:
      description: The shape of the request to create an invoice.
      type: object
      required: [transactionType]
      properties:
        externalId:
          oneOf:
            - $ref: '#/components/schemas/InvoiceExternalId'
            - type: 'null'
          description: |
            The external id if it is known within the external system. This
            field can be null.
        source:
          oneOf:
            - type: string
              example: Millum
              maxLength: 255
            - type: 'null'
          description: Where the invoice originated from.
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        refNumber:
          description: Number that appears on the invoice.
          type: string
          maxLength: 255
        poNumber:
          oneOf:
            - type: string
            - type: 'null'
        description:
          oneOf:
            - type: string
              description: The description of what the invoice is.
            - type: 'null'
        totalAmount:
          oneOf:
            - $ref: '#/components/schemas/MonetaryValue'
          description: The total amount of the invoice, including tax/VAT.
        currency:
          description: The currency code the invoice is in.
          type: string
          format: ISO-4217
          maxLength: 3
        language:
          oneOf:
            - $ref: '#/components/schemas/Language'
            - type: 'null'
        issueDate:
          description: The date the invoice was issued on.
          type: string
          format: date
        glDate:
          type: string
          format: date
        dueDate:
          description: The date the invoice is due on.
          type: string
          format: date
        accountNumber:
          oneOf:
            - type: string
            - type: 'null'
        servicePeriodStart:
          oneOf:
            - type: string
              format: date
            - type: 'null'
        servicePeriodEnd:
          oneOf:
            - type: string
              format: date
            - type: 'null'
        paymentRef:
          description: |
            The payment reference number. The KID is a customer identification
            number that is mandatory for invoices in Norway.
          type: string
          maxLength: 255
        paymentInfo:
          oneOf:
            - $ref: '#/components/schemas/InvoicePaymentInfo'
            - type: 'null'
        paymentTerm:
          oneOf:
            - $ref: '#/components/schemas/InvoicePaymentTerm'
            - type: 'null'
          description: |
            The payment term the invoice should be paid in. If the term is not
            known, pass `null` here.
        creditAccount:
          oneOf:
            - $ref: '#/components/schemas/CreditAccountRef'
            - type: 'null'
        vendor:
          oneOf:
            - $ref: '#/components/schemas/VendorLookup'
            - type: 'null'
        lineItems:
          type: array
          items:
            $ref: '#/components/schemas/CreateInvoiceLineItem'
        bolNumbers:
          type: array
          items:
            $ref: '#/components/schemas/BillOfLadingNumber'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceFieldInput'
    CreateTaxCode:
      required: [code, description, rate]
      properties:
        code:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 255
          example: Tax code description
        rate:
          type: string
          format: decimal
          example: '0.25'
    TaxCode:
      type: object
      properties:
        id:
          type: string
          format: uuid
        code:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 255
          example: Tax code description
        rate:
          type: string
          format: decimal
          example: '0.25'
    PurchaseOrderExternalId:
      type: string
      maxLength: 255
      description: The id of the purchase order within the ERP system.
    CreatePurchaseOrder:
      required: [poNumber, amount, vendor, lineItems, issuedOn]
      properties:
        externalId:
          oneOf:
            - $ref: '#/components/schemas/PurchaseOrderExternalId'
            - type: 'null'
        issuedOn:
          oneOf:
            - type: string
              format: date
              description: When the purchase order was issued.
            - type: 'null'
        poNumber:
          type: string
          maxLength: 255
          example: '12003400'
          description: The purchase order number. This is used to match against invoices.
        deliverOn:
          oneOf:
            - type: string
              format: date
            - type: 'null'
        amount:
          $ref: '#/components/schemas/MonetaryValue'
        currencyId:
          oneOf:
            - $ref: '#/components/schemas/Currency'
          description: The currency that the purchase order uses.
        description:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
          description: The description of the purchase order.
        requestor:
          oneOf:
            - $ref: '#/components/schemas/PurchaseOrderRequestor'
            - type: 'null'
        siteOwner:
          oneOf:
            - $ref: '#/components/schemas/PurchaseOrderSiteOwner'
            - type: 'null'
        createdOn:
          oneOf:
            - type: string
              format: date
            - type: 'null'
          description: When the purchase order was created.
        vendor:
          oneOf:
            - $ref: '#/components/schemas/VendorLookup'
          description: The vendor of the purchase order.
        lineItems:
          type: array
          items:
            $ref: '#/components/schemas/CreatePurchaseOrderItem'
    UpdatePurchaseOrder:
      type: object
      required: [poNumber, amount, vendor]
      properties:
        externalId:
          oneOf:
            - $ref: '#/components/schemas/PurchaseOrderExternalId'
            - type: 'null'
        issuedOn:
          oneOf:
            - type: string
              format: date
            - type: 'null'
          description: When the purchase order was issued.
        poNumber:
          type: string
          maxLength: 255
          example: '12003400'
          description: The purchase order number. This is used to match against invoices.
        deliverOn:
          oneOf:
            - type: string
              format: date
            - type: 'null'
        amount:
          $ref: '#/components/schemas/MonetaryValue'
        currencyId:
          oneOf:
            - $ref: '#/components/schemas/Currency'
          description: The currency that the purchase order uses.
        description:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
          description: The description of the purchase order.
        requestor:
          oneOf:
            - $ref: '#/components/schemas/PurchaseOrderRequestor'
            - type: 'null'
        siteOwner:
          oneOf:
            - $ref: '#/components/schemas/PurchaseOrderSiteOwner'
            - type: 'null'
        createdOn:
          oneOf:
            - type: string
              format: date
            - type: 'null'
          description: When the purchase order was created.
        vendor:
          oneOf:
            - $ref: '#/components/schemas/VendorLookup'
          description: The vendor of the purchase order.
    CreatePurchaseOrderItem:
      type: object
      required:
        - productNumber
        - quantityRequested
        - unitAmount
        - lineItemTotal
        - lineNumber
      properties:
        productNumber:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        productDescription:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        unitOfMeasure:
          oneOf:
            - $ref: '#/components/schemas/UnitOfMeasure'
            - type: 'null'
        quantityAccepted:
          description: The quantity accepted. Required when `matchingType` set to `four_way`.
          type: string
          format: decimal
          example: '1.0'
        quantityReceived:
          description: The quantity received. Required when `matchingType` set to `three_way` (default) or `four_way`.
          type: string
          format: decimal
          example: '12.3'
        quantityRequested:
          description: The quantity requested. Required for all `matchingType` values.
          type: string
          format: decimal
          example: '1.0'
        matchingType:
          $ref: "#/components/schemas/PurchaseOrderLineItemMatchingType"
        unitAmount:
          $ref: '#/components/schemas/MonetaryValue'
        lineItemTotal:
          $ref: '#/components/schemas/MonetaryValue'
        lineNumber:
          type: integer
          minimum: 1
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/DimensionRef'
    UnitOfMeasure:
      type: string
      example: kg
      maxLength: 255
      description: The unit of measure used.
    CreatePurchaseOrderLineItem:
      type: object
      required:
        - purchaseOrderId
        - productNumber
        - quantityRequested
        - unitAmount
        - lineItemTotal
        - lineNumber
      properties:
        purchaseOrderId:
          type: string
          description: The ID of the purchase order to attach this line item to.
        productNumber:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        productDescription:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        unitOfMeasure:
          oneOf:
            - $ref: '#/components/schemas/UnitOfMeasure'
            - type: 'null'
        quantityAccepted:
          description: The quantity accepted. Required when `matchingType` set to `four_way`.
          type: string
          format: decimal
          example: '1.0'
        quantityReceived:
          description: The quantity received. Required when `matchingType` set to `three_way` (default) or `four_way`.
          type: string
          format: decimal
          example: '12.3'
        quantityRequested:
          description: The quantity requested. Required for all `matchingType` values.
          type: string
          format: decimal
          example: '1.0'
        matchingType:
          $ref: "#/components/schemas/PurchaseOrderLineItemMatchingType"
        unitAmount:
          $ref: '#/components/schemas/MonetaryValue'
        lineItemTotal:
          $ref: '#/components/schemas/MonetaryValue'
        lineNumber:
          type: integer
          minimum: 1
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/DimensionRef'
    UpdatePurchaseOrderLineItem:
      type: object
      required:
        - productNumber
        - quantityRequested
        - unitAmount
        - lineItemTotal
        - lineNumber
      properties:
        productNumber:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        productDescription:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        unitOfMeasure:
          oneOf:
            - $ref: '#/components/schemas/UnitOfMeasure'
            - type: 'null'
        quantityAccepted:
          description: The quantity accepted. Required when `matchingType` set to `four_way`.
          type: string
          format: decimal
          example: '1.0'
        quantityReceived:
          description: The quantity received. Required when `matchingType` set to `three_way` (default) or `four_way`.
          type: string
          format: decimal
          example: '12.3'
        quantityRequested:
          description: The quantity requested. Required for all `matchingType` values.
          type: string
          format: decimal
          example: '1.0'
        matchingType:
          $ref: "#/components/schemas/PurchaseOrderLineItemMatchingType"
        unitAmount:
          $ref: '#/components/schemas/MonetaryValue'
        lineItemTotal:
          $ref: '#/components/schemas/MonetaryValue'
        lineNumber:
          type: integer
          minimum: 1
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/DimensionRef'
    Attachment:
      type: object
      required: [id]
      properties:
        id:
          $ref: '#/components/schemas/InternalId'
    Invoice:
      type: object
      required:
        - transactionType
        - refNumber
        - poNumber
        - description
        - currency
        - language
        - lineItems
        - status
      properties:
        totalAmount:
          oneOf:
            - $ref: '#/components/schemas/MonetaryValue'
          description: The total amount of the invoice, including tax/VAT.
        amountWithoutTax:
          oneOf:
            - $ref: '#/components/schemas/MonetaryValue'
          description: The total amount of the invoice, excluding tax.
        amountTax:
          oneOf:
            - $ref: '#/components/schemas/MonetaryValue'
          description: The total amount of tax on the invoice.
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        refNumber:
          description: number that appears on the invoice
          type: string
          maxLength: 255
        poNumber:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        description:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        currency:
          $ref: '#/components/schemas/Currency'
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceField'
        language:
          oneOf:
            - $ref: '#/components/schemas/Language'
            - type: 'null'
        issueDate:
          type: string
          format: date
        glDate:
          type: string
          format: date
        dueDate:
          type: string
          format: date
        paymentInfo:
          $ref: '#/components/schemas/PaymentInfo'
        invoiceInfo:
          $ref: '#/components/schemas/InvoiceInfoNO'
        source:
          oneOf:
            - type: string
              example: Millum
              maxLength: 255
            - type: 'null'
          description: Where the invoice originates from.
        internalId:
          type: string
        internalUpdatedAt:
          type: string
          description: The date time in UTC when the record was updated at.
          format: date-time
        externalId:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
          description: The id of the invoice within the ERP system.
        paymentTermId:
          oneOf:
            - type: string
              format: uuid
            - type: 'null'
          description: The id of the `PaymentTerm` a vendor uses.
        externalUpdatedAt:
          type: string
          description: |
            The date time when the invoice was updated in the ERP system. This
            does not have UTC normalization.
          format: date-time
        paymentTerm:
          oneOf:
            - $ref: '#/components/schemas/InvoicePaymentTerm'
            - type: 'null'
          description: |
            The payment term the invoice should be paid in. If the term is not
            known, pass `null` here.
        paymentRef:
          description: |
            The payment reference number. The KID is a customer identification
            number that is mandatory for invoices in Norway.
          type: string
          maxLength: 255
        vendorInternalId:
          oneOf:
            - $ref: '#/components/schemas/InternalId'
            - type: 'null'
        vendorExternalId:
          oneOf:
            - $ref: '#/components/schemas/ExternalId'
            - type: 'null'
        vendor:
          oneOf:
            - $ref: '#/components/schemas/SparseVendor'
            - type: 'null'
        lineItems:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: '#/components/schemas/InvoiceLineItem'
        postingError:
          type: string
        documentUrl:
          type: string
          format: url
        status:
          $ref: '#/components/schemas/InvoiceState'
        bolNumbers:
          type: array
          items:
            $ref: '#/components/schemas/BillOfLadingNumber'
        selfAssessedUseTaxAmount:
          oneOf:
            - $ref: '#/components/schemas/MonetaryValue'
            - type: 'null'
        selfAssessedUseTaxAccount:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
    InvoiceConfirm:
      type: object
      required: [externalId, externalUpdatedAt]
      properties:
        externalId:
          $ref: '#/components/schemas/ExternalId'
        externalUpdatedAt:
          type: string
          format: date-time
        postingError:
          type: string
    InvoiceReject:
      type: object
      required: [item, field, reason]
      properties:
        item:
          oneOf:
            - type: integer
              minimum: 0
            - type: 'null'
        field:
          oneOf:
            - type: string
            - type: 'null'
        reason:
          type: string
    InvoiceState:
      type: string
      enum:
        - NOT_READY
        - IN_APPROVALS
        - READY_FOR_POST
        - READY_FOR_TRANSFER
        - POSTED
        - TRANSFERRED
    PurchaseOrderStatus:
      type: string
      description: The status of the purchase order.
      enum: [open, closed]
      default: open
    PurchaseOrderLineItemMatchingType:
      type: string
      description: |
        The type of matching that should be done on the line item. Determines which quantity fields are required.
        `two_way` - Only the `quantityRequested` field is required.
        `three_way` (default) - The `quantityRequested` and `quantityReceived` fields are required.
        `four_way` - The `quantityRequested`, `quantityReceived`, and `quantityAccepted` fields are required.
      enum: [two_way, three_way, four_way]
      default: three_way
    PurchaseOrderLineItem:
      type: object
      required: [internalId]
      properties:
        internalId:
          type: string
          maxLength: 255
        productNumber:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        productDescription:
          type: string
          maxLength: 255
        unitOfMeasure:
          oneOf:
            - $ref: '#/components/schemas/UnitOfMeasure'
            - type: 'null'
        quantityAccepted:
          description: The quantity accepted. Required when `matchingType` set to `four_way`.
          type: string
          format: decimal
          example: '1.0'
        quantityRequested:
          description: The quantity requested. Required for all `matchingType` values.
          type: string
          format: decimal
          example: '1.0'
        quantityReceived:
          description: The quantity received. Required when `matchingType` set to `three_way` (default) or `four_way`.
          type: string
          format: decimal
          example: '1.0'
        matchingType:
          $ref: "#/components/schemas/PurchaseOrderLineItemMatchingType"
        unitAmount:
          oneOf:
            - $ref: '#/components/schemas/MonetaryValue'
            - type: 'null'
          description: The per-unit amount.
        lineItemTotal:
          oneOf:
            - $ref: '#/components/schemas/MonetaryValue'
            - type: 'null'
          description: The line item total.
        lineNumber:
          description: The line number of the item in the purchase order.
          type: integer
          minimum: 1
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/DimensionRef'
        invoiceItemsMatched:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/MatchItem'
    PurchaseOrder:
      type: object
      required: [internalId, internalUpdatedAt, status, lineItems]
      properties:
        internalId:
          type: string
          maxLength: 255
        externalId:
          type: string
          maxLength: 255
        vendor:
          $ref: '#/components/schemas/Vendor'
        internalUpdatedAt:
          type: string
          format: date-time
        issuedOn:
          type: string
          format: date
        poNumber:
          type: string
          maxLength: 255
        deliverOn:
          type: string
          format: date
        amount:
          oneOf:
            - $ref: '#/components/schemas/MonetaryValue'
            - type: 'null'
        currencyId:
          oneOf:
            - $ref: '#/components/schemas/Currency'
            - type: 'null'
        status:
          $ref: '#/components/schemas/PurchaseOrderStatus'
        description:
          type: string
          maxLength: 255
        lineItems:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderLineItem'
    PurchaseOrders:
      type: array
      items:
        $ref: '#/components/schemas/PurchaseOrder'
    PurchaseOrderRequestor:
      type: object
      description: The person or entity who requested the purchase order.
      properties:
        email:
          oneOf:
            - $ref: '#/components/schemas/Email'
            - type: 'null'
        name:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
    PurchaseOrderSiteOwner:
      type: object
      description: The person or entity who is in charge of the purchase order site.
      properties:
        email:
          oneOf:
            - $ref: '#/components/schemas/Email'
            - type: 'null'
        name:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
    TrainingInvoice:
      type: object
      required:
        - currency
        - description
        - language
        - lineItems
        - poNumber
        - refNumber
        - transactionType
        - vendorExternalId
      properties:
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        refNumber:
          description: number that appears on the invoice
          type: string
          maxLength: 255
        poNumber:
          oneOf:
            - type: string
            - type: 'null'
        description:
          oneOf:
            - type: string
            - type: 'null'
        currency:
          type: string
          format: ISO-4217
          maxLength: 255
        language:
          oneOf:
            - $ref: '#/components/schemas/Language'
            - type: 'null'
        issueDate:
          type: string
          format: date
        glDate:
          type: string
          format: date
        dueDate:
          type: string
          format: date
        paymentInfo:
          $ref: '#/components/schemas/PaymentInfo'
        invoiceInfo:
          $ref: '#/components/schemas/InvoiceInfoNO'
        vendorExternalId:
          $ref: '#/components/schemas/ExternalId'
        lineItems:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: '#/components/schemas/InvoiceLineItem'
        externalData:
          oneOf:
            - $ref: '#/components/schemas/ExternalData'
            - type: 'null'
        externalUpdatedAt:
          type: string
          description: |
            The date time when the invoice was updated in the ERP system. This
            does not have UTC normalization.
          format: date-time
        bolNumbers:
          type: array
          items:
            $ref: '#/components/schemas/BillOfLadingNumber'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceField'
    TrainingInvoiceUpsert:
      type: object
      required:
        - transactionType
        - vendorExternalId
        - externalUpdatedAt
        - refNumber
      properties:
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        refNumber:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
          description: number that appears on the invoice
        poNumber:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        description:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        currency:
          oneOf:
            - $ref: '#/components/schemas/Currency'
            - type: 'null'
        language:
          oneOf:
            - $ref: '#/components/schemas/Language'
            - type: 'null'
        issueDate:
          oneOf:
            - type: string
              format: date
            - type: 'null'
        glDate:
          oneOf:
            - type: string
              format: date
            - type: 'null'
        dueDate:
          oneOf:
            - type: string
              format: date
            - type: 'null'
        accountNumber:
          oneOf:
            - type: string
            - type: 'null'
        servicePeriodStart:
          oneOf:
            - type: string
              format: date
            - type: 'null'
        servicePeriodEnd:
          oneOf:
            - type: string
              format: date
            - type: 'null'
        paymentInfo:
          $ref: '#/components/schemas/PaymentInfo'
        invoiceInfo:
          $ref: '#/components/schemas/InvoiceInfoNO'
        vendorExternalId:
          oneOf:
            - $ref: '#/components/schemas/ExternalId'
            - type: 'null'
        totalAmount:
          oneOf:
            - $ref: '#/components/schemas/MonetaryValue'
          description: The total amount of the invoice, including tax/VAT.
        lineItems:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: '#/components/schemas/TrainingInvoiceLineItemUpsert'
        externalData:
          oneOf:
            - $ref: '#/components/schemas/ExternalData'
            - type: 'null'
        externalId:
          $ref: '#/components/schemas/ExternalId'
        externalUpdatedAt:
          type: string
          format: date-time
          description: |
            The date time when the invoice was updated in the ERP system. This
            does not have UTC normalization.
          example: '2021-06-29T17:20:53.154'
        bolNumbers:
          type: array
          items:
            $ref: '#/components/schemas/BillOfLadingNumber'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceFieldInput'
    Invoices:
      type: array
      items:
        $ref: '#/components/schemas/Invoice'
    TrainingInvoices:
      type: array
      items:
        $ref: '#/components/schemas/TrainingInvoice'
    InvoiceLineItem:
      type: object
      required: [costAccountExternalId, dimensionsExternalIds, amount]
      properties:
        index:
          description: |
            A non-negative integer indicating where the line item is in the
            document. No two line items shall be allowed to have the same index.
            If unspecified, it will be inferred based on its position. If
            another line item has an index set, and the current line item is
            left null, it will take the next highest value.
          type: integer
        amount:
          type: number
        amountTax:
          oneOf:
            - $ref: '#/components/schemas/MonetaryValue'
          description: The amount of tax on the invoice line item.
        description:
          type: string
        comment:
          type: string
        billable:
          type: boolean
          default: false
        accrual:
          $ref: '#/components/schemas/AccrualInfo'
        invoiceLineItemInfo:
          oneOf:
            - $ref: '#/components/schemas/InvoiceLineItemInfo'
            - type: 'null'
        vat:
          oneOf:
            - $ref: '#/components/schemas/LineItemVat'
            - type: 'null'
        taxCode:
          oneOf:
            - $ref: '#/components/schemas/TaxCode'
            - type: 'null'
        costAccountInternalId:
          oneOf:
            - $ref: '#/components/schemas/InternalId'
            - type: 'null'
          deprecated: true
          description: Use `costAccount` instead.
        costAccountExternalId:
          oneOf:
            - $ref: '#/components/schemas/ExternalId'
            - type: 'null'
          deprecated: true
          description: Use `costAccount` instead.
        costAccount:
          oneOf:
            - $ref: '#/components/schemas/CostAccountInfo'
            - type: 'null'
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/Dimension'
        dimensionsInternalIds:
          deprecated: true
          description: Use `dimensions` instead.
          type: array
          items:
            $ref: '#/components/schemas/InternalId'
        dimensionsExternalIds:
          deprecated: true
          description: Use `dimensions` instead.
          type: array
          items:
            $ref: '#/components/schemas/ExternalId'
        quantityInvoiced:
          description: The quantity of things that were invoiced.
          type: string
          format: decimal
        lineItemTotal:
          description: The line item total
          oneOf:
            - $ref: '#/components/schemas/MonetaryValue'
            - type: 'null'
        lineType:
          oneOf:
            - $ref: '#/components/schemas/InvoiceItemLineType'
            - type: 'null'
        poLineNumber:
          oneOf:
            - type: integer
            - type: 'null'
          description: The line number in a matched purchase order.
        poNumber:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
          description: The matched purchase order number.
        poItemsMatched:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/MatchItem'
        unitPrice:
          oneOf:
            - $ref: '#/components/schemas/MonetaryValue'
            - type: 'null'
        number:
          description: The item number
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
    TrainingInvoiceLineItemUpsert:
      type: object
      required: [amount]
      properties:
        index:
          description: |
            A non-negative integer indicating where the line item is in the
            document. No two line items shall be allowed to have the same index.
            If unspecified, it will be inferred based on its position. If
            another line item has an index set, and the current line item is
            left null, it will take the next highest value.
          type: integer
          minimum: 0
        amount:
          type: number
          description: |
            The line item total amount including all tax amounts. This is used
            to calculate the predicted total amount on the invoice.
        amountTax:
          description: The line item amount tax.
          oneOf:
            - $ref: '#/components/schemas/MonetaryValue'
            - type: 'null'
        description:
          type: string
          description: The line item comment.
        comment:
          type: string
          description: The description of the line item.
        billable:
          type: boolean
          default: false
        accrual:
          $ref: '#/components/schemas/AccrualInfo'
        invoiceLineItemInfo:
          oneOf:
            - $ref: '#/components/schemas/InvoiceLineItemInfo'
            - type: 'null'
        costAccountExternalId:
          oneOf:
            - $ref: '#/components/schemas/ExternalId'
            - type: 'null'
        dimensionsExternalIds:
          description: |
            This has been deprecated. Please use the `dimensions` field to
            specify the dimensions to set for this line item.
          deprecated: true
          type: array
          items:
            $ref: '#/components/schemas/ExternalId'
        dimensions:
          oneOf:
            - type: array
              items:
                $ref: '#/components/schemas/DimensionRef'
            - type: 'null'
        lineItemIsVatOnly:
          type: boolean
          default: false
        lineType:
          $ref: '#/components/schemas/InvoiceItemLineType'
        quantityInvoiced:
          oneOf:
            - type: string
              format: decimal
            - type: 'null'
          description: The quantity of things that were invoiced.
        unitPrice:
          description: The price per unit of the item.
          oneOf:
            - $ref: '#/components/schemas/MonetaryValue'
            - type: 'null'
        number:
          description: The item number
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        taxCodeId:
          oneOf:
            - type: string
              format: uuid
              description: ID of Tax Code to use for the line item.
            - type: 'null'
    VatCode:
      type: object
      required: [internalId, internalUpdatedAt, code, description]
      properties:
        internalId:
          $ref: '#/components/schemas/InternalId'
        internalUpdatedAt:
          type: string
          description: The date time in UTC when the record was updated at.
          format: date-time
        externalId:
          $ref: '#/components/schemas/ExternalId'
        externalUpdatedAt:
          type: string
          format: date-time
          description: |
            The date time when the invoice was updated in the ERP system. This
            does not have UTC normalization.
          example: '2021-06-29T17:20:53.154'
        code:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 255
        activeStartingAt:
          type: string
          format: date-time
        activeEndingAt:
          type: string
          format: date-time
        rate:
          type: number
        remoteData:
          type: object
        defaultInvoiceCreditAccount:
          type: string
          maxLength: 255
        vatCreditAccount:
          type: string
          maxLength: 255
        vatDebitAccount:
          type: string
          maxLength: 255
    VatCodes:
      type: array
      items:
        $ref: '#/components/schemas/VatCode'
    VatCodeUpsert:
      type: object
      required: [externalUpdatedAt]
      properties:
        code:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 255
        externalId:
          $ref: '#/components/schemas/ExternalId'
        externalUpdatedAt:
          type: string
          format: date-time
          description: |
            The date time when the invoice was updated in the ERP system. This
            does not have UTC normalization.
          example: '2021-06-29T17:20:53.154'
        activeStartingAt:
          type: string
          format: date-time
        activeEndingAt:
          type: string
          format: date-time
        rate:
          type: number
        remoteData:
          type: object
        defaultInvoiceCreditAccount:
          type: string
          maxLength: 255
        vatCreditAccount:
          type: string
          maxLength: 255
        vatDebitAccount:
          type: string
          maxLength: 255
    CreateVendorGroup:
      type: object
      required: [name]
      properties:
        name:
          type: string
          description: The name of the vendor group
    UpdateVendorGroup:
      type: object
      required: [name]
      properties:
        name:
          type: string
          description: The name of the vendor group
    VendorGroup:
      type: object
      required: [id, name]
      properties:
        id:
          type: string
          description: The id of the vendor group.
        name:
          type: string
          description: The name of the vendor group
    VendorGroups:
      type: array
      items:
        $ref: '#/components/schemas/VendorGroup'
    VendorState:
      type: string
      enum: [CONFIRMED, UNCONFIRMED]
    VendorStateFilter:
      type: string
      description: |
        - `PENDING` - The vendor is not confirmed, has no errors, and was
          not predicted. It is pending to be confirmed.
        - `ACTIVE` - The vendor is confirmed and has no errors.
        - `PREDICTED` - The vendor was predicted by Vic.
        - `ERRORED` - The vendor has errors set.
      enum: [ACTIVE, PENDING, PREDICTED, ERRORED]
    SparseVendor:
      type: object
      description: A vendor object but sparsely populated.
      required: [internalId]
      properties:
        internalId:
          $ref: '#/components/schemas/InternalId'
        externalId:
          oneOf:
            - $ref: '#/components/schemas/ExternalId'
            - type: 'null'
        orgNumber:
          oneOf:
            - type: string
            - type: 'null'
        countryCode:
          oneOf:
            - $ref: '#/components/schemas/CountryCode'
            - type: 'null'
        name:
          oneOf:
            - type: string
            - type: 'null'
    Vendor:
      type: object
      required:
        - internalId
        - internalUpdatedAt
        - name
        - email
        - phone
        - addressStreet
        - addressCity
        - addressState
        - addressPostalCode
        - countryCode
      properties:
        internalId:
          $ref: '#/components/schemas/InternalId'
        internalUpdatedAt:
          type: string
          description: The date time in UTC when the record was updated at.
          format: date-time
        externalId:
          $ref: '#/components/schemas/ExternalId'
        externalUpdatedAt:
          type: string
          format: date-time
          description: |
            The date time when the invoice was updated in the ERP system. This
            does not have UTC normalization.
          example: '2021-06-29T17:20:53.154'
        name:
          type: string
          maxLength: 255
        email:
          oneOf:
            - $ref: '#/components/schemas/Email'
            - type: 'null'
        description:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        phone:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        addressStreet:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        addressCity:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        addressState:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        addressPostalCode:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        countryCode:
          oneOf:
            - $ref: '#/components/schemas/CountryCode'
            - type: 'null'
        currency:
          $ref: '#/components/schemas/Currency'
        confirmedAt:
          oneOf:
            - type: string
              format: date-time
            - type: 'null'
        state:
          $ref: '#/components/schemas/VendorState'
        taxInfo:
          $ref: '#/components/schemas/VendorTaxInfo'
        defaultPaymentInfo:
          $ref: '#/components/schemas/PaymentInfo'
        paymentTermId:
          oneOf:
            - type: string
              format: uuid
            - type: 'null'
          description: The id of the `PaymentTerm` a vendor uses.
        vendorGroupId:
          oneOf:
            - type: string
              format: uuid
            - type: 'null'
          description: The `VendorGroup` id the vendor is attached to.
        externalData:
          oneOf:
            - $ref: '#/components/schemas/ExternalData'
            - type: 'null'
        errors:
          description: The errors that occurred in the external ERP system.
          items:
            $ref: '#/components/schemas/VendorRemoteError'
    Vendors:
      type: array
      items:
        $ref: '#/components/schemas/Vendor'
    VendorUpsert:
      type: object
      required: [externalUpdatedAt]
      properties:
        externalId:
          $ref: '#/components/schemas/ExternalId'
        externalUpdatedAt:
          type: string
          format: date-time
          description: |
            The date time when the invoice was updated in the ERP system. This
            does not have UTC normalization.
          example: '2021-06-29T17:20:53.154'
        name:
          type: string
          maxLength: 255
        email:
          oneOf:
            - $ref: '#/components/schemas/Email'
            - type: 'null'
        phone:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        addressStreet:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        addressCity:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        addressState:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        addressPostalCode:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        countryCode:
          oneOf:
            - $ref: '#/components/schemas/CountryCode'
            - type: 'null'
        currency:
          $ref: '#/components/schemas/Currency'
        confirmedAt:
          oneOf:
            - type: string
              format: date-time
            - type: 'null'
        state:
          $ref: '#/components/schemas/VendorState'
        taxInfo:
          $ref: '#/components/schemas/VendorTaxInfo'
        defaultPaymentInfo:
          $ref: '#/components/schemas/PaymentInfo'
        paymentTermId:
          oneOf:
            - type: string
              format: uuid
            - type: 'null'
          description: The id of the `PaymentTerm` a vendor uses.
        vendorGroupId:
          oneOf:
            - type: string
              format: uuid
            - type: 'null'
          description: The `VendorGroup` id the vendor is attached to.
        externalData:
          oneOf:
            - $ref: '#/components/schemas/ExternalData'
            - type: 'null'
        managers:
          type: array
          items:
            $ref: '#/components/schemas/VendorManager'
        errors:
          description: The errors that occurred in the external ERP system.
          items:
            $ref: '#/components/schemas/VendorRemoteError'
    VendorCallback:
      type: object
      required:
        - addressCity
        - addressPostalCode
        - addressState
        - addressStreet
        - countryCode
        - email
        - internalId
        - name
        - phone
      properties:
        internalId:
          $ref: '#/components/schemas/InternalId'
        name:
          type: string
          maxLength: 255
        email:
          oneOf:
            - $ref: '#/components/schemas/Email'
            - type: 'null'
        phone:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        addressStreet:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        addressCity:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        addressState:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        addressPostalCode:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        countryCode:
          oneOf:
            - $ref: '#/components/schemas/CountryCode'
            - type: 'null'
        currency:
          oneOf:
            - $ref: '#/components/schemas/Currency'
            - type: 'null'
        confirmedAt:
          oneOf:
            - type: string
              format: date-time
            - type: 'null'
        state:
          $ref: '#/components/schemas/VendorState'
        taxInfo:
          $ref: '#/components/schemas/VendorTaxInfo'
        defaultPaymentInfo:
          $ref: '#/components/schemas/PaymentInfo'
        paymentTermId:
          oneOf:
            - type: string
              format: uuid
            - type: 'null'
          description: The id of the `PaymentTerm` a vendor uses.
        vendorGroupId:
          oneOf:
            - type: string
              format: uuid
            - type: 'null'
          description: The `VendorGroup` id the vendor is attached to.
        externalData:
          oneOf:
            - $ref: '#/components/schemas/ExternalData'
            - type: 'null'
        errors:
          description: The errors that occurred in the external ERP system.
          items:
            $ref: '#/components/schemas/VendorRemoteError'
    VendorConfirm:
      type: object
      required: [externalId, externalUpdatedAt]
      properties:
        externalId:
          $ref: '#/components/schemas/ExternalId'
        externalUpdatedAt:
          type: string
          format: date-time
          description: Does not have UTC normalization.
          example: '2021-06-29T17:20:53.154'
    SubscriptionUpsert:
      type: object
      required: [callbackUrl, accessToken, expiresAt]
      properties:
        callbackUrl:
          type: string
          format: uri
          example: https://my.erp.com/vic-callback/
        accessToken:
          type: string
          maxLength: 1024
        expiresAt:
          type: string
          format: date-time
        events:
          oneOf:
            - type: array
              items:
                $ref: '#/components/schemas/WebhookEventName'
            - type: 'null'
          description: |
            The list of events to subscribe to. If you wish to subscribe to all
            events simply pass `["all"]`. If you are updating the subscription
            and wish to leave the events subscribed to alone, this field should
            be left unspecified or null.
    Error:
      description: |
        generic error message in JSON format.  Note the 'code' field should
        match the HTTP status code of the wrapping HTTP request.
      type: object
      required: [code, message]
      properties:
        code:
          type: integer
          minimum: 100
          maximum: 599
        message:
          $ref: '#/components/schemas/ErrorString'
    VendorManager:
      type: object
      description: |
        Vic.ai user who manages a vendor.
        When `email` is provided, it takes priority over `name`. If no user
        exists with the `email` provided, then `name` will be used as a
        fallback. If neither are found, the api will return an error.
      properties:
        email:
          oneOf:
            - $ref: '#/components/schemas/Email'
            - type: 'null'
        name:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
    VendorRemoteError:
      description: |
        The remote error on a Vendor.
        This is to describe any errors that have happened in the ERP system. If
        the error that occurred does not pertain to a specific field, then the
        `field` can be left null, or missing all together.
      type: object
      required: [message]
      properties:
        message:
          type: string
          maxLength: 1024
        field:
          description: |
            The field on the Vic.ai vendor that has the error.
            If the error does not pertain to a specific field, then this will be
            null.
            Example: `{"field": "name"}` or `{"field": "externalUpdatedAt"}`
          type: string
          maxLength: 255
    SetVendorRemoteErrors:
      description: Data structure for setting a Vendor's remote errors.
      type: object
      required: [errors]
      properties:
        errors:
          items:
            $ref: '#/components/schemas/VendorRemoteError'
    VendorError:
      description: |
        Data structure for describing errors when posting a vendor to an
        ERP.  Use a string to describe a single error that applies to
        the entire vendor object, or describes a general error when
        attempting to post, e.g. a connection error.  Use an array of
        strings if multiple errors apply to the entire vendor object.
        If errors apply to specific fields in the ERP, in lieu of a string
        return a FieldError object.
      oneOf:
        - $ref: '#/components/schemas/ErrorString'
        - type: array
          maxItems: 64
          items:
            oneOf:
              - $ref: '#/components/schemas/ErrorString'
              - $ref: '#/components/schemas/FieldError'
    ErrorString:
      type: string
      maxLength: 255
    FieldError:
      description: |
        Data structure for describing an error associated with a specific
        field in another datastructure.
        - internalField represents the Vic.API field name
        - externalField represents the associated field name in the ERP
      type: object
      required: [internalField, externalField, message]
      properties:
        internalField:
          $ref: '#/components/schemas/ErrorString'
        externalField:
          $ref: '#/components/schemas/ErrorString'
        message:
          $ref: '#/components/schemas/ErrorString'
    PaymentInfoTermUnit:
      type: string
      description: The payment term units supported.
      enum: [DAYS]
    PaymentInfoTerm:
      type: object
      required: [count, unit]
      properties:
        count:
          type: integer
          minimum: 1
        unit:
          $ref: '#/components/schemas/PaymentInfoTermUnit'
    AccrualTermUnit:
      type: string
      description: The accrual term units supported.
      enum: [MONTHS]
    AccrualInfo:
      required: [start, count, unit]
      properties:
        start:
          type: string
          format: date
        count:
          oneOf:
            - type: integer
            - type: 'null'
          description: |
            The number of units from the `start`. The system _may_ have this field as
            `null` due to incomplete information or a user has cleared the information.
            However, when specifying the `count` to the api, it is required to be
            greater than `1`.
        unit:
          $ref: '#/components/schemas/AccrualTermUnit'
    TransactionType:
      type: string
      description: The type of invoice transaction.
      enum: [INVOICE, CREDITNOTE]
      default: INVOICE
    InvoiceItemLineType:
      type: string
      description: The type of invoice item line.
      enum: [item, expense]
      default: expense
    CustomField:
      type: object
      properties:
        id:
          type: string
          maxLength: 255
        value:
          type: string
          maxLength: 255
        label:
          type: string
          maxLength: 255
    InvoiceField:
      type: object
      properties:
        label:
          type: string
          maxLength: 255
        title:
          type: string
          maxLength: 255
        type:
          type: string
          maxLength: 255
        value:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
    InvoiceFieldInput:
      type: object
      required: [label, value]
      properties:
        label:
          maxLength: 255
          type: string
        value:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
    VendorTaxInfo:
      type: object
      properties:
        taxId:
          oneOf:
            - type: string
            - type: 'null'
        is1099vendor:
          type: boolean
        orgNumber:
          oneOf:
            - type: string
            - type: 'null'
    InternationalBankAccount:
      type: object
      properties:
        iban:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        bic:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
    PaymentInfoMethod:
      type: string
      description: |
        The payment method to be used.
        Note: `BANKACCOUNT` is equivalent to `ACH` in the Web UI.
      enum: [BANKACCOUNT, BANKGIRO, PLUSGIRO, IBAN, BBAN]
    PaymentInfo:
      type: object
      properties:
        bankAccountNum:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        bankCode:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        paymentTerm:
          oneOf:
            - $ref: '#/components/schemas/PaymentInfoTerm'
            - type: 'null'
        bankGiro:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        plusGiro:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        bban:
          oneOf:
            - type: string
              maxLength: 255
            - type: 'null'
        internationalBankAccount:
          oneOf:
            - $ref: '#/components/schemas/InternationalBankAccount'
            - type: 'null'
        defaultMethod:
          $ref: '#/components/schemas/PaymentInfoMethod'
    InvoiceInfoNO:
      type: object
      required: [kid]
      properties:
        kid:
          deprecated: true
          description: |
            **Deprecated**: The `paymentRef` on the `Invoice` should be used
            instead.
            The KID is a customer identification number that is mandatory for
            invoices in Norway.
          type: string
        creditAccountExternalId:
          type: string
        creditAccountInternalId:
          type: string
    InvoiceLineItemInfo:
      type: object
      properties:
        vatCode:
          oneOf:
            - type: string
            - type: 'null'
        vatAmount:
          oneOf:
            - type: number
            - type: 'null'
        vatRate:
          oneOf:
            - $ref: '#/components/schemas/MonetaryValue'
            - type: 'null'
          description: |
            The amount of VAT percentage. If the VAT percentage is unknown, this
            should be left `NULL` or unspecified.
    RequestIdCallback:
      type: object
      required: [requestId]
      properties:
        requestId:
          type: string
          format: uuid
    GetTokenInput:
      type: object
      required: [client_id, client_secret]
      properties:
        client_id:
          type: string
        client_secret:
          type: string
    GetTokenResult:
      type: object
      required: [access_token, token_type, expires_in]
      properties:
        access_token:
          type: string
        token_type:
          type: string
          enum: [Bearer]
        expires_in:
          type: integer
    UnsubscribeResult:
      type: string
      enum: [OK]
    Tags:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    Tag:
      type: object
      required: [value]
      properties:
        id:
          type: string
        value:
          type: string
          maxLength: 255
    VendorTags:
      type: array
      items:
        $ref: '#/components/schemas/VendorTag'
    VendorTag:
      type: object
      required: [vendorId, tagId]
      properties:
        id:
          type: string
        vendorId:
          type: string
        tagId:
          type: string
    CreateTag:
      type: object
      required: [value]
      properties:
        value:
          type: string
          maxLength: 255
    UpdateTag:
      type: object
      required: [value]
      properties:
        value:
          type: string
          maxLength: 255
    CreateVendorTag:
      type: object
      required: [vendorId, tagId]
      properties:
        vendorId:
          type: string
        tagId:
          type: string
    MatchItem:
      type: object
      required: [invoiceItemId, purchaseOrderItemId, quantityMatched]
      properties:
        invoiceItemId:
          type: string
          description: The invoice item's internal id.
        purchaseOrderItemId:
          type: string
          description: The purchase order item's internal id.
        quantityMatched:
          type: string
    BillOfLadingNumber:
      description: The bill of lading number.
      type: object
      required: [bolNumber]
      properties:
        bolNumber:
          type: string
    WebhookEventName:
      type: string
      enum:
        - all
        - payment_batch_processed
        - vendorNew
        - invoicePost
        - invoiceTransfer
        - syncRequest
    WebhookEvent:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/WebhookEventName'
        data:
          oneOf:
            - $ref: '#/components/schemas/PaymentBatch'
            - $ref: '#/components/schemas/Invoice'
            - $ref: '#/components/schemas/Vendor'

  #
  # The requests
  #
  requestBodies:
    CreatePurchaseOrderRequest:
      description: Create a purchase order.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatePurchaseOrder'
    UpdatePurchaseOrderRequest:
      description: Create a purchase order.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdatePurchaseOrder'
    CreatePurchaseOrderLineItemRequest:
      description: Create a purchase order line item.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatePurchaseOrderLineItem'
    UpdatePurchaseOrderLineItemRequest:
      description: Update a purchase order line item.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdatePurchaseOrderLineItem'
    CreateDimensionRequest:
      description: Create a dimension.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateDimension'
    CreateTagRequest:
      description: Create a tag.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateTag'
    UpdateTagRequest:
      description: Update a tag.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateTag'
    CreateVendorTagRequest:
      description: Create a vendor tag.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateVendorTag'
    CreatePaymentTermRequest:
      description: Create a payment term.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatePaymentTerm'
    CreateTaxCode:
      description: Create a tax code.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateTaxCode'
    CreateVendorGroupRequest:
      description: Create a vendor group.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateVendorGroup'
    UpdateVendorGroupRequest:
      description: Update a vendor group.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateVendorGroup'
    UpdatePaymentTermRequest:
      description: Update a payment term.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdatePaymentTerm'
  #
  # The responses
  #
  responses:
    ForbiddenResponse:
      description: The request was forbidden.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ResourceNotFoundResponse:
      description: Resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnprocessableEntityResponse:
      description: Errors with the input are present.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ErrorResponse:
      description: An unexpected error has occurred. Check the body for more details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TokenCreatedResponse:
      description: Successful access token request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetTokenResult'
    HealthyResponse:
      description: Successful health check response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HealthCheck'
    AccountsResponse:
      description: A paged array of accounts
      headers:
        x-next:
          $ref: '#/components/headers/NextPageToken'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Accounts'
    AccountResponse:
      description: Shows the account.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Account'
    AccountUpsertedResponse:
      description: Account was upserted successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Account'
    AccountDeletedResponse:
      description: Information for deleted account
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Account'
    DimensionsResponse:
      description: A paged array of dimensions
      headers:
        x-next:
          $ref: '#/components/headers/NextPageToken'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Dimensions'
    DimensionResponse:
      description: A dimension.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Dimension'
    DimensionCreatedResponse:
      description: Dimension was created successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Dimension'
    DimensionUpdatedResponse:
      description: Dimension was updated successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Dimension'
    DimensionDeletedResponse:
      description: Dimension was deleted successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Dimension'
    VendorsResponse:
      description: A paged array of vendors
      headers:
        x-next:
          $ref: '#/components/headers/NextPageToken'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Vendors'
    VendorResponse:
      description: A single vendor.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Vendor'
    VendorCreatedResponse:
      description: Vendor was successfully created.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Vendor'
    VendorUpdatedResponse:
      description: Vendor was successfully updated.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Vendor'
    VendorDeletedResponse:
      description: Vendor was successfully deleted.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Vendor'
    VendorGroupsResponse:
      description: List of vendor groups.
      headers:
        x-next:
          $ref: '#/components/headers/NextPageToken'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VendorGroups'
    VendorGroupResponse:
      description: List of vendor groups.
      headers:
        x-next:
          $ref: '#/components/headers/NextPageToken'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VendorGroup'
    VendorGroupDeletedResponse:
      description: Vendor group was successfully deleted.
    VendorRemoteErrorsUpdatedResponse:
      description: Vendor errors were successfully updated.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Vendor'
    VendorRemoteErrorsClearedResponse:
      description: Vendor errors were successfully cleared.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Vendor'
    InvoicesResponse:
      description: A paged array of invoices
      headers:
        x-next:
          $ref: '#/components/headers/NextPageToken'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Invoices'
    InvoiceCreatedResponse:
      description: Invoice was created successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Invoice'
    AttachmentCreatedResponse:
      description: The shape of the response when an attachment is created.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Attachment'
    InvoiceResponse:
      description: A single invoice.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Invoice'
    InvoiceDeletedResponse:
      description: Invoice was successfully deleted.
    InvoiceDocumentResponse:
      description: The invoice's document.
      content:
        application/pdf:
          schema:
            type: string
            format: binary
    InvoiceConfirmedResponse:
      description: The invoice was confirmed successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Invoice'
    InvoiceRejectedResponse:
      description: The invoice was rejection error message was acknowledged.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Invoice'
    InvoiceLineItemsResponse:
      description: The ungrouped line items for the invoice.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/InvoiceLineItem'
    TrainingInvoicesResponse:
      description: A paged array of training invoices.
      headers:
        x-next:
          $ref: '#/components/headers/NextPageToken'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TrainingInvoices'
    TrainingInvoiceResponse:
      description: A single training invoice.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TrainingInvoice'
    TrainingInvoiceUpsertedResponse:
      description: Training invoice was successfully upserted.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TrainingInvoice'
    TrainingInvoiceDeletedResponse:
      description: Training invoice was successfully deleted.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TrainingInvoice'
    TrainingInvoiceDocumentResponse:
      description: The document attached to the training invoice.
      content:
        application/pdf: {}
    VatCodesResponse:
      description: An array of VAT codes
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VatCodes'
    VatCodeResponse:
      description: A single VAT code.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VatCode'
    VatCodeUpsertedResponse:
      description: Vat code upserted successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VatCode'
    VatCodeDeletedResponse:
      description: Vat code deleted successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VatCode'
    SubscriptionResponse:
      description: The subscription information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubscriptionUpsert'
    SubscriptionUpsertedResponse:
      description: Subscription successfully upserted.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubscriptionUpsert'
    SubscriptionDeletedResponse:
      description: Subscription successfully deleted.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnsubscribeResult'
    PurchaseOrdersResponse:
      description: A paged array of purchase orders
      headers:
        x-next:
          $ref: '#/components/headers/NextPageToken'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PurchaseOrders'
    PurchaseOrderResponse:
      description: The purchase order.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PurchaseOrder'
    PurchaseOrderLineItemResponse:
      description: The purchase order line item.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PurchaseOrderLineItem'
    PurchaseOrderDeletedResponse:
      description: Purchase order was successfully deleted.
    PurchaseOrderLineItemDeletedResponse:
      description: Purchase order line item was successfully deleted.
    TagListResponse:
      description: A list of tags.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Tags'
    TagResponse:
      description: A single tag.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Tag'
    TagDeletedResponse:
      description: Tag was successfully deleted.
    TaxCodeResponse:
      description: A tax code.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TaxCode'
    VendorTagListResponse:
      description: A list of vendor tags.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VendorTags'
    VendorTagResponse:
      description: A single vendor tag.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VendorTag'
    VendorTagDeletedResponse:
      description: Vendor tag was successfully deleted.
    PaymentTermListResponse:
      description: A list of payment terms.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentTerm'
    PaymentTermResponse:
      description: A single payment term.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentTerm'
    PaymentTermDeletedResponse:
      description: Payment term was successfully deleted.
    PaymentBatchListResponse:
      description: A paged array of Payment batches
      headers:
        x-next:
          $ref: '#/components/headers/NextPageToken'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentBatches'
    PaymentBatchResponse:
      description: A single Payment Batch.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentBatch'
