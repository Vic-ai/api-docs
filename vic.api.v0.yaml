---
openapi: 3.0.3
info:
  version: 0.17.2
  contact: {}
  title: Vic.Api
  description: |
    Vic.Api allows you to connect an *ERP* to the Vic.ai product suite.
    The API is structured to provide 3 categories of functionality:
    - **Masterdata:** Masterdata are data in the ERP that Vic.ai interacts with.
      So you must provide and update this masterdata in Vic.ai, and you may also
      verify the masterdata copy in Vic.ai
    - **Training Data:** AI requires historical data to train its data model. So
      you can put historical invoices into Vic.ai to train it, and verify that
      they are in Vic.ai.
    - **Webhooks:** Users or automated tasks could take various actions in the
      Vic.ai product suite that result in an interaction with the ERP (for
      example, posting an invoice, or requesting synchronization). We'll tell
      you when such an action has occurred, via a webhook.
  license:
    name: MIT
security:
  - BearerAuth: []
servers:
  - url: https://api.us.dev.vic.ai/v0
    description: development server, US
  - url: https://api.no.dev.vic.ai/v0
    description: development server, NO
  - url: https://api.us.stage.vic.ai/v0
    description: staging server, US
  - url: https://api.no.stage.vic.ai/v0
    description: staging server, NO
  - url: https://api.us.vic.ai/v0
    description: production server, US
  - url: https://api.no.vic.ai/v0
    description: production server, NO
tags:
  - name: Accounts
    description: |
      GL (General Ledger) accounts are part of your *ERP* **Masterdata**. In
      order to be associated with an invoice line item, key data about the
      account must be stored in Vic.ai.  These operations allow querying and
      manipulation of these GL account data.
  - name: Auth
    description: |
      Authorization-related routes.  These passthrough to our third-party
      authorization system.
  - name: CostAccounts
  - name: Dimensions
    description: |
      Dimensions are part of your *ERP* **Masterdata**, and represent business
      categories that are associated with invoice line items, that Vic.ai can
      automatically assign to invoice line items. These operations allow
      querying and manipulation of the dimension data.
  - name: General
    description: |
      General requests on the state of the Vic.ai system
  - name: Invoices
    description: |
      These routes give you read-only access to two types of invoices:
      - Invoices which have not yet been posted to the ERP system.
      - Invoices which have been posted to the ERP system.
      By default, access to unposted invoices is restricted.
  - name: PaymentTerms
    description: |
      Payment Terms are part of your *ERP* **Masterdata**, that represent
      payment terms that Vic.ai can automatically assign to invoices. Some
      vendors may have a default payment term, and some invoices may have a
      specific payment term. In either case, Vic.ai can automatically assign
      payment terms to invoices.
  - name: PurchaseOrders
  - name: Subscriptions
    description: |
      These requests represents a userâ€™s action in the Vic.ai system and
      repsonses to those actions.
  - name: Tags
    description: |
      Tags are part of your *ERP* **Masterdata**, and represent business
      categories that are associated with certain entities, like Vendor.
  - name: TrainingInvoices
    description: |
      Invoices that are being used to train Vic.ai's machine learning system.
  - name: Vendors
    description: |
      Vendors are part of your *ERP* **Masterdata**, and represent companies
      that produce invoices.  In order to be associated with an invoice, key
      data about the vendor must be stored in Vic.ai. These operations allow
      querying and manipulation of the vendor data.
  - name: VatCodes
    description: |
      In some regions, Vat Codes are part of your *ERP* **Masterdata**, that
      represent timeboxed VAT codes and VAT values that Vic.ai can automatically
      assign to invoice line items.
paths:
  /token:
    post:
      description: Use this request to obtain an authorization token
      summary: Token service
      operationId: obtainToken
      tags: [Auth]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTokenInput'
      responses:
        '200':
          $ref: '#/components/responses/TokenCreatedResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /healthCheck:
    get:
      description: Use this request to obtain a health check statement.
      summary: Health check
      operationId: healthCheck
      tags: [General]
      responses:
        '200':
          $ref: '#/components/responses/HealthyResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /accounts:
    get:
      description: |
        Use this request to query the GL account data that are stored in Vic.ai.
      summary: List all accounts
      operationId: listAccounts
      tags: [Accounts]
      parameters:
        - $ref: '#/components/parameters/PagingLimit'
        - $ref: '#/components/parameters/PagingCursor'
        - $ref: '#/components/parameters/SinceFilter'
        - $ref: '#/components/parameters/UseSystem'
        - $ref: '#/components/parameters/SortOrder'
      responses:
        '200':
          $ref: '#/components/responses/AccountsResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /accounts/{id}:
    get:
      description: |
        Use this request to get data for a single GL account that is stored in
        Vic.ai.
      summary: Info for a specific account
      operationId: getAccount
      tags: [Accounts]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
      responses:
        '200':
          $ref: '#/components/responses/AccountResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    put:
      description: |
        Use this request to *upsert* GL account data for one GL account into
        Vic.ai.
        If the account is known by Vic.ai, the externalId supplied will be used
        to resolve the account and perform an update of the data, otherwise, a
        new account will be inserted.
        If the upsert action is part of a syncRequest, you should include the
        syncRequest ID in the `X-Request-Id` header.
      summary: Upserts an account
      operationId: upsertAccount
      tags: [Accounts]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
        - $ref: '#/components/parameters/RequestId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpsert'
      responses:
        '201':
          $ref: '#/components/responses/AccountUpsertedResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: |
        Use this request to delete data for a single account that is stored in
        Vic.ai
      summary: Deletes an account
      operationId: deleteAccount
      tags: [Accounts]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
      responses:
        '201':
          $ref: '#/components/responses/AccountDeletedResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /dimensions:
    get:
      description: |
        Use this request to query the dimensions data that are stored in Vic.ai.
      summary: List all dimensions
      operationId: listDimensions
      tags: [Dimensions]
      parameters:
        - $ref: '#/components/parameters/PagingLimit'
        - $ref: '#/components/parameters/PagingCursor'
        - $ref: '#/components/parameters/SinceFilter'
        - $ref: '#/components/parameters/UseSystem'
        - $ref: '#/components/parameters/SortOrder'
      responses:
        '200':
          $ref: '#/components/responses/DimensionsResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      description: Create a new dimension in Vic.ai.
      summary: Create a dimension
      operationId: createDimension
      tags: [Dimensions]
      requestBody:
        $ref: '#/components/requestBodies/CreateDimensionRequest'
      responses:
        '201':
          $ref: '#/components/responses/DimensionCreatedResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /dimensions/{id}:
    get:
      description: |
        Use this request to get data for a single dimension that is stored in
        Vic.ai.
      summary: Info for a specific dimension
      operationId: getDimension
      tags: [Dimensions]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
      responses:
        '200':
          $ref: '#/components/responses/DimensionResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    put:
      description: |
        Use this request to update or insert dimensions data for one dimension
        into Vic.ai.
        **Note:** The insert portion of this will be changed to no longer
        function and the `createDimension` operation should be used instead.
        If the dimension is known by Vic.ai, the `externalId` supplied will be
        used to resolve the dimension and perform an update of the data,
        otherwise, a new dimension will be inserted.
        If the upsert action is part of a `syncRequest`, you should include the
        `syncRequest` ID in the `X-Request-Id` header.
      summary: Upserts a dimension
      operationId: upsertDimension
      tags: [Dimensions]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
        - $ref: '#/components/parameters/RequestId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DimensionUpsert'
      responses:
        '200':
          $ref: '#/components/responses/DimensionUpdatedResponse'
        '201':
          $ref: '#/components/responses/DimensionCreatedResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: Use this request to delete data for a single dimension that is
        stored in Vic.ai
      summary: Deletes a dimension
      operationId: deleteDimension
      tags: [Dimensions]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
      responses:
        '201':
          $ref: '#/components/responses/DimensionDeletedResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /vendors:
    get:
      description: Use this request to query the vendor data that are stored in Vic.ai.
      summary: List all vendors
      operationId: listVendors
      tags: [Vendors]
      parameters:
        - $ref: '#/components/parameters/PagingLimit'
        - $ref: '#/components/parameters/PagingCursor'
        - $ref: '#/components/parameters/SinceFilter'
        - $ref: '#/components/parameters/VendorConfirmedFilter'
        - $ref: '#/components/parameters/VendorUnconfirmedFilter'
        - $ref: '#/components/parameters/UseSystem'
        - $ref: '#/components/parameters/SortOrder'
        - name: state
          in: query
          description: |
            Filter vendors by state.
            - `PENDING` - The vendor is not confirmed, has no errors, and was
              not predicted. It is pending to be confirmed.
            - `ACTIVE` - The vendor is confirmed and has no errors.
            - `PREDICTED` - The vendor was predicted by Vic.
            - `ERRORED` - The vendor has errors set.
          required: false
          schema:
            $ref: '#/components/schemas/VendorStateFilter'
      responses:
        '200':
          $ref: '#/components/responses/VendorsResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /vendors/{id}:
    get:
      description: Use this request to get data for a single vendor that is stored
        in Vic.ai.
      summary: Info for a specific vendor
      operationId: getVendor
      tags: [Vendors]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
      responses:
        '200':
          $ref: '#/components/responses/VendorResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    put:
      description: |
        Updates or inserts a vendor into the Vic.ai system.
        All fields passed are set on the vendor. All fields that are omitted
        from the request body are considered to be null and will be set to null.
        If the vendor is known by Vic.ai, the `externalId` supplied will be used
        to resolve the vendor and perform an update of the data, otherwise, a
        new vendor will be inserted.
        If the upsert action is part of a `syncRequest`, you should include the
        `syncRequest` ID in the `X-Request-Id` header.
      summary: Upserts a vendor
      operationId: upsertVendor
      tags: [Vendors]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
        - $ref: '#/components/parameters/RequestId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VendorUpsert'
      responses:
        '200':
          $ref: '#/components/responses/VendorUpdatedResponse'
        '201':
          $ref: '#/components/responses/VendorCreatedResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: |
        Use this request to delete data for a single vendor that is stored in
        Vic.ai
      summary: Deletes a vendor
      operationId: deleteVendor
      tags: [Vendors]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
      responses:
        '201':
          $ref: '#/components/responses/VendorDeletedResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /vendors/{id}/errors:
    post:
      description: |
        Use this post to report vendor update failure errors back to Vic.ai.
        Strictly a repsonse to the callbacks.
        * The `X-Request-Id` header is required.
        * The `id` MUST be a Vendor `internalId`.
      summary: Completes the response callback cycle resulting from a 202
      operationId: setVendorRemoteErrors
      tags: [Vendors]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/RequestId'
        - $ref: '#/components/parameters/UseSystem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetVendorRemoteErrors'
      responses:
        '200':
          $ref: '#/components/responses/VendorRemoteErrorsUpdatedResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    delete:
      summary: Clears errors on the Vendor.
      description: Used to clear errors that have been fixed in the ERP system.
      operationId: clearVendorRemoteErrors
      tags: [Vendors]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/RequestId'
        - $ref: '#/components/parameters/UseSystem'
      responses:
        '200':
          $ref: '#/components/responses/VendorRemoteErrorsClearedResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /vendorGroups:
    get:
      description: List all vendor groups.
      summary: List all vendor groups
      operationId: listVendorGroups
      tags: [Vendors]
      parameters:
        - $ref: '#/components/parameters/PagingLimit'
        - $ref: '#/components/parameters/PagingCursor'
      responses:
        '200':
          $ref: '#/components/responses/VendorGroupsResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      description: Create a vendor group.
      summary: Create a vendor group
      operationId: createVendorGroup
      tags: [Vendors]
      requestBody:
        $ref: '#/components/requestBodies/CreateVendorGroupRequest'
      responses:
        '201':
          $ref: '#/components/responses/VendorGroupResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /vendorGroups/{id}:
    put:
      description: Update the vendor group.
      summary: Update the vendor group
      operationId: updateVendorGroup
      tags: [Vendors]
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the vendor group
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: '#/components/requestBodies/UpdateVendorGroupRequest'
      responses:
        '200':
          $ref: '#/components/responses/VendorGroupResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: Delete vendor group.
      summary: Delete vendor group
      operationId: deleteVendorGroup
      tags: [Vendors]
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the vendor group
          schema:
            type: string
            format: uuid
      responses:
        '204':
          $ref: '#/components/responses/VendorGroupDeletedResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /invoices:
    get:
      description: |
        Use this request to query the invoice data that are stored in Vic.ai.
      summary: List all invoices
      operationId: listInvoices
      tags: [Invoices]
      parameters:
        - $ref: '#/components/parameters/PagingLimit'
        - $ref: '#/components/parameters/PagingCursor'
        - $ref: '#/components/parameters/UseSystem'
        - $ref: '#/components/parameters/SinceFilter'
        - $ref: '#/components/parameters/SortOrder'
        - $ref: '#/components/parameters/InvoiceStateFilter'
      responses:
        '200':
          $ref: '#/components/responses/InvoicesResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      summary: Create an invoice.
      description: |
        Creates an invoice within the Vic system.
      operationId: createInvoice
      tags: [Invoices]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInvoice'
      responses:
        '201':
          $ref: '#/components/responses/InvoiceCreatedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /invoices/{id}:
    get:
      description: |
        Use this request to get data for a single invoice that is stored in
        Vic.ai
      summary: Info for a specific invoice
      operationId: getInvoice
      tags: [Invoices]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
      responses:
        '200':
          $ref: '#/components/responses/InvoiceResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    patch:
      description: |
        Use this request to indicate that an invoice has been posted or
        transferred to the ERP system, in the case where you have not activated
        a subscription, or you have responded to the subscription with a
        202-asynchronous response.
        Note that this operation can either be a confirmation, or a rejection,
        depending on the shape of the payload.
        Possible payloads:
        - InvoiceConfirm: used to confirm that the invoice data have been
          successfully posted to the ERP, possibly including a postingError.
          - Use of this postingError means that the invoice data are posted, but
            some secondary content needs amendation in the ERP that cannot be
            performed from the vic user interface (for example: a problem
            uploading the posted document).
        - InvoiceReject: used to communicate that the invoice data have NOT been
          successfully posted to the ERP, due to invalid data. This should NOT
          be used to communicate an error in posting due to a general failure
          such as a network issue or an availability issue with the ERP, in
          those or similar cases, a retry should be performed without notifying the vic system.
        Currently unsupported:
        - InvoiceClearError: the error set in an `InvoiceConfirm` operation
          should be cleared because the postingError has been resolved in the
          ERP. This cannot be used to clear an error due to `InvoiceReject`.
        Note that `:id` *must* be internalId for this route.
      summary: Asynchronous reply to invoice post or invoice transfer
      operationId: ackInvoice
      tags: [Invoices]
      parameters:
        - name: id
          in: path
          required: true
          description: |
            The `internalId` of the invoice which should be confirmed.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/InvoiceConfirm'
                - $ref: '#/components/schemas/InvoiceReject'
      responses:
        '201':
          $ref: '#/components/responses/InvoiceResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: |
        Use this request to delete data for a single invoice that is stored in
        Vic.ai
      summary: Deletes an invoice
      operationId: deleteInvoice
      tags: [Invoices]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
        - $ref: '#/components/parameters/Comment'
      responses:
        '204':
          $ref: '#/components/responses/InvoiceDeletedResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /invoices/{id}/process:
    post:
      summary: Start the invoice processing.
      description: |
        Tells Vic that the invoice is ready to start being processed. Once this
        is called, it may not be called again.
      operationId: startProcessingInvoice
      tags: [Invoices]
      parameters:
        - $ref: '#/components/parameters/UseSystem'
        - name: id
          in: path
          required: true
          description: The Invoice internal id or external id.
          schema:
            type: string
      responses:
        '202':
          $ref: '#/components/responses/InvoiceResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /invoices/{id}/document:
    get:
      description: |
        Use this request to get the document associated with a single invoice
        that is stored in Vic.ai
      summary: Document for a specific invoice
      operationId: getInvoiceDocument
      tags: [Invoices]
      parameters:
        - $ref: '#/components/parameters/UseSystem'
        - name: id
          in: path
          required: true
          description: The Invoice internal id or external id.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/InvoiceDocumentResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      summary: Upload document invoice
      description: |
        This attaches a document to the invoice for processing. An external id
        must be specified for an invoice prior to calling this.
        * Once an invoice has been processed, you may not attach a new document.
        * Once a document has been attached to an invoice, it may not be
          changed.
        **NOTE:** The maximum file size allowed is 64MB.
      operationId: uploadDocumentInvoice
      tags: [Invoices]
      parameters:
        - $ref: '#/components/parameters/UseSystem'
        - name: id
          in: path
          required: true
          description: The Invoice internal id or external id.
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [document]
              properties:
                document:
                  type: string
                  format: binary
                  nullable: false
      responses:
        '200':
          $ref: '#/components/responses/InvoiceResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /invoices/{id}/confirm:
    post:
      description: |
        Used to confirm that the invoice data have been successfully posted to
        the ERP, possibly including a `postingError`.
        Use of this `postingError` means that the invoice data are posted, but
        some secondary content needs amendation in the ERP that cannot be
        performed from the vic user interface (for example: a problem
        uploading the posted document).
        Note: `id` *must* be the `internalId` of the invoice.
      summary: Asynchronous reply to invoice post or invoice transfer
      operationId: confirmInvoice
      tags: [Invoices]
      parameters:
        - name: id
          in: path
          required: true
          description: |
            The `internalId` of the invoice which should be confirmed.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceConfirm'
      responses:
        '200':
          $ref: '#/components/responses/InvoiceConfirmedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /invoices/{id}/reject:
    post:
      description: |
        Used to communicate that the invoice data have **NOT** been
        successfully posted to the ERP, due to invalid data. This should **NOT**
        be used to communicate an error in posting due to a general failure
        such as a network issue or an availability issue with the ERP, in
        those or similar cases, a retry should be performed without notifying the vic system.
        Note: `id` *must* be the `internalId` of the invoice.
      summary: Asynchronous reply to invoice post
      operationId: rejectInvoice
      tags: [Invoices]
      parameters:
        - name: id
          in: path
          required: true
          description: |
            The `internalId` of the invoice which should be confirmed.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceReject'
      responses:
        '200':
          $ref: '#/components/responses/InvoiceRejectedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /invoices/{id}/lineItems:
    get:
      description: |
        List all of the line items for the invoice.
        NOTE: They are ungrouped so that you may inspect and modify them as
        necessary.
      summary: line items for a specific invoice
      operationId: getInvoicelineItems
      tags: [Invoices]
      parameters:
        - $ref: '#/components/parameters/UseSystem'
        - name: id
          in: path
          required: true
          description: The Invoice internal id or external id.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/InvoiceLineItemsResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /trainingInvoices:
    get:
      description: |
        Use this request to query the invoice data that are stored in Vic.ai.
      summary: List all invoices
      operationId: listTrainingInvoices
      tags: [TrainingInvoices]
      parameters:
        - $ref: '#/components/parameters/PagingLimit'
        - $ref: '#/components/parameters/PagingCursor'
        - $ref: '#/components/parameters/SinceFilter'
        - $ref: '#/components/parameters/SortOrder'
      responses:
        '200':
          $ref: '#/components/responses/TrainingInvoicesResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /trainingInvoices/{id}:
    get:
      description: |
        Use this request to get data for a single training invoice that is
        stored in Vic.ai
      summary: Info for a specific invoice
      operationId: getTrainingInvoice
      tags: [TrainingInvoices]
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        '200':
          $ref: '#/components/responses/TrainingInvoiceResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    put:
      description: |
        Use this request to *upsert* training invoice data for one invoice into
        Vic.ai.
        When putting a new invoice into the system, an `invoiceDocument` will be
        required. If the training invoice already exists, an `invoiceDocument`
        will not be required.
        All requests that need to have the `invoiceDocument` updated should have
        a `multipart/form-data` content type.
        If the training invoice just needs to be updated without a document
        specified a content type of `application/json` is permitted.
        If the invoice is known by Vic.ai, the `externalId` supplied will be
        used to resolve the invoice and perform an update of the data,
        otherwise, a new invoice will be created.
      summary: Upserts a training invoice
      operationId: upsertTrainingInvoice
      tags: [TrainingInvoices]
      parameters:
        - $ref: '#/components/parameters/PathId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [invoiceData]
              properties:
                invoiceData:
                  $ref: '#/components/schemas/TrainingInvoiceUpsert'
                invoiceDocument:
                  type: string
                  format: binary
            encoding:
              invoiceData:
                contentType: application/json
                headers:
                  Content-Type:
                    required: true
                    schema:
                      type: string
              invoiceDocument:
                contentType: application/pdf, image/png, image/tiff, application/vnd.openxmlformats-officedocument.wordprocessingml.document
                headers:
                  Content-Type:
                    required: true
                    schema:
                      type: string
      responses:
        '201':
          $ref: '#/components/responses/TrainingInvoiceUpsertedResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: |
        Use this request to delete data for a single training invoice that is
        stored in Vic.ai
      summary: Deletes a training invoice
      operationId: deleteTrainingInvoice
      tags: [TrainingInvoices]
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        '201':
          $ref: '#/components/responses/TrainingInvoiceDeletedResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /trainingInvoices/{id}/document:
    get:
      description: |
        Use this request to get the document associated with a training invoice
        that is stored in Vic.ai
      summary: Document for a specific invoice
      operationId: getTrainingInvoiceDocument
      tags: [TrainingInvoices]
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        '200':
          $ref: '#/components/responses/TrainingInvoiceDocumentResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /vatCodes:
    get:
      description: |
        Use this request to query all the vat code data that are stored in
        Vic.ai.
      summary: List all vat codes
      operationId: listVatCodes
      tags: [VatCodes]
      parameters:
        - $ref: '#/components/parameters/PagingLimit'
        - $ref: '#/components/parameters/PagingCursor'
        - $ref: '#/components/parameters/SinceFilter'
        - $ref: '#/components/parameters/SortOrder'
        - $ref: '#/components/parameters/VatCodeFilter'
      responses:
        '200':
          $ref: '#/components/responses/VatCodesResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /vatCodes/{id}:
    get:
      description: |
        Use this request to get data for a single vat code that is stored in
        Vic.ai
      summary: Info for a specific vat code
      operationId: getVatCode
      tags: [VatCodes]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
      responses:
        '200':
          $ref: '#/components/responses/VatCodeResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    put:
      description: |
        Use this request to *upsert* vat code into Vic.ai.
        The request body should contain the vat code object as JSON.
        If the vat code is known by Vic.ai, the id supplied will be used to
        resolve the vat code and perform an update of the data, otherwise, a new
        vat code will be inserted.
      summary: Upserts a vat code
      operationId: upsertVatCode
      tags: [VatCodes]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VatCodeUpsert'
      responses:
        '201':
          $ref: '#/components/responses/VatCodeUpsertedResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: |
        Use this request to delete data for a single vat code that is stored in
        Vic.ai
      summary: Deletes a vat code
      operationId: deleteVatCode
      tags: [VatCodes]
      parameters:
        - $ref: '#/components/parameters/PathId'
        - $ref: '#/components/parameters/UseSystem'
      responses:
        '201':
          $ref: '#/components/responses/VatCodeDeletedResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /taxCodes:
    post:
      description: Creates a company's tax code
      summary: Creates a company's tax code
      operationId: createTaxCode
      tags: [TaxCodes]
      requestBody:
        $ref: '#/components/requestBodies/CreateTaxCode'
      responses:
        '201':
          $ref: '#/components/responses/TaxCodeResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    get:
      description: Get the list of tax codes for a company
      summary: Get the list of tax codes for a company
      operationId: getTaxCodes
      tags: [TaxCodes]
      responses:
        '200':
          $ref: '#/components/responses/TaxCodeResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /subscription:
    get:
      description: Get the current status of the subscription that is set.
      summary: Get subscription info
      operationId: getSubscription
      tags: [Subscriptions]
      responses:
        '200':
          $ref: '#/components/responses/SubscriptionResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    put:
      description: |
        This request is used to configure or modify a new subscription to user
        and automated actions.
        You must supply a callback url and set an access token that Vic.ai can
        use to authenticate itself in your system. Notifications of user actions
        will proceed via the documented schema.
        The callback url must be https.
      summary: Subscribe to callback notifications
      operationId: subscribe
      tags: [Subscriptions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionUpsert'
      responses:
        '201':
          $ref: '#/components/responses/SubscriptionUpsertedResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
      callbacks:
        vendorNew:
          https://mycallbackurl.com/vendorNew:
            post:
              description: |
                This request is sent when a user in Vic.ai adds a new vendor to
                the system.
                Request body contains the vendor object.
                A 201 response indicates that the vendor object has been
                successfully persisted to the ERP, and it must contain the ERP's
                vendor object id as the externalId parameter.
                Any other response will be considered a failure, the vendor
                object `externalId` will not be specified, and the error message
                you specify will be surfaced to the user.
                A 400 response indicates a data validation error.
                This callback will timeout after 5 seconds.
              parameters:
                - $ref: '#/components/parameters/SubscriptionToken'
                - $ref: '#/components/parameters/RequestId'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/VendorCallback'
              responses:
                '201':
                  description: Successful upsert
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/VendorConfirm'
                '202':
                  description: Acknowledge receipt
                  content:
                    application/json:
                      schema:
                        enum: [OK]
                4XX:
                  description: |
                    Error when posting vendor.  If this is a generic error,
                    use the `Error` schema; if it's an error reported by the
                    ERP, use the `VendorError` schema.
                  content:
                    application/json:
                      schema:
                        oneOf:
                          - $ref: '#/components/schemas/Error'
                          - $ref: '#/components/schemas/VendorError'
                default:
                  description: unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
        invoicePost:
          https://mycallbackurl.com/invoicePost:
            post:
              description: |
                This request is sent when a user in Vic.ai posts an invoice
                object to the system.
                Request body contains the invoice object (`invoiceData` part) as
                JSON, and corresponding invoice documents as a pdf file
                (`invoicePayload` part) as multipart form data. This will always
                be a pdf file.
                A 201 response indicates that the invoice object has been
                successfully persisted to the ERP, and it must contain the ERP's
                invoice object id as the `externalId` parameter.
                A 202 response indicates that the receipt of the invoice object
                has been acknowledged; an asynchronous update will occur via
                `invoiceConfirm` and the supplied 'X-Request-Id' in the request
                header will be provided as the `X-Request-Id` header for any
                associated asynchronous updates.
                Any other response will be considered a failure, the invoice
                object `externalId` will not be specified, and the error message
                you specify will be surfaced to the user.
                A 400 response indicates a data validation error.
                This callback will timeout after 5 seconds; to prevent
                inconsistencies, if the request will take longer than 5 seconds,
                it is appropriate to respond with a 202 response code.
              parameters:
                - $ref: '#/components/parameters/SubscriptionToken'
                - $ref: '#/components/parameters/RequestId'
              requestBody:
                required: true
                content:
                  multipart/form-data:
                    schema:
                      type: object
                      properties:
                        invoiceData:
                          $ref: '#/components/schemas/Invoice'
                        invoiceDocument:
                          type: string
                          format: binary
                    encoding:
                      invoiceData:
                        contentType: application/json
                      invoiceDocument:
                        contentType: application/pdf
              responses:
                '201':
                  description: Successful upsert
                  content:
                    application/json:
                      schema:
                        oneOf:
                          - $ref: '#/components/schemas/InvoiceConfirm'
                '202':
                  description: Deferred post, confirmation asynchronous
                '400':
                  description: invalid invoice data
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
                default:
                  description: unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
        invoiceTransfer:
          https://mycallbackurl.com/invoiceTransfer:
            post:
              description: |
                This request is sent when a user in Vic.ai selects and invoice
                document and *transfers* it to the ERP.
                Note: there will be no Vic.ai generated invoice data sent with
                this a *transferred* invoice.
                Request body contains the invoice document.
                A 201 response indicates that the invoice document has been
                successfully transferred to the ERP, and it must contain the
                ERP's invoice document id as the externalId parameter.
                A 202 response indicates that the receipt of the invoice
                transfer has been acknowledged and an asynchronous update will
                occur via `invoiceConfirm` operation and the supplied
                `X-Request-Id` in the request header will be provided as the
                `X-Request-Id` header for any associated asynchronous updates.
                Any other response will be considered a failure, the invoice
                object `externalId` will not be specified, and the error message
                you specify will be surfaced to the user.
                A 400 response indicates a data validation error.
                This callback will timeout after 5 seconds and to prevent
                inconsistencies, if the request will take longer than 5 seconds,
                it is appropriate to respond with a 202 response code.
              parameters:
                - $ref: '#/components/parameters/SubscriptionToken'
                - $ref: '#/components/parameters/RequestId'
              requestBody:
                required: true
                content:
                  multipart/form-data:
                    schema:
                      type: object
                      properties:
                        invoiceData:
                          $ref: '#/components/schemas/Invoice'
                        invoiceDocument:
                          type: string
                          format: binary
                    encoding:
                      invoiceData:
                        contentType: application/json
                      invoiceDocument:
                        contentType: application/pdf
              responses:
                '201':
                  description: Successful upsert
                  content:
                    application/json:
                      schema:
                        enum: [OK]
                '202':
                  description: Deferred post, confirmation asynchronous
                default:
                  description: Unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
        syncRequest:
          https://mycallbackurl.com/syncRequest:
            post:
              description: |
                This request is sent when a user in Vic.ai triggers a sync of all
                masterdata.
                In response to this message, youâ€™re expected to post masterdata
                (vendors, GL accounts, dimensions) into Vic.ai using the
                respective routes. You may perform a partial update, determining
                which data to update using queries.
                The body of the `syncRequest` contains the `X-Request-Id` and
                this is a  token that should be returned with all upsert actions
                associated  with this `syncRequest`.
                A 200 response indicates that the request has been acknowledged
                and informs the user that the sync has been successfully triggered.
              parameters:
                - $ref: '#/components/parameters/SubscriptionToken'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/RequestIdCallback'
              responses:
                '200':
                  description: Request acknowleged
                default:
                  description: Request unservicable
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
    delete:
      description: |
        This request is used to cancel a subscription to user actions. In
        conjunction with a post requst, you may use this as a first step to
        update subscription URLs or authorization tokens.
      summary: Unsubscribe from callback notifications
      operationId: unsubscribe
      tags: [Subscriptions]
      responses:
        '201':
          $ref: '#/components/responses/SubscriptionDeletedResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /costAccounts:
    get:
      description: |
        Use this request to query all the cost accounts for a specific client.
      summary: List all cost accounts
      operationId: getCostAccounts
      tags: [CostAccounts]
      parameters:
        - $ref: '#/components/parameters/PagingLimit'
        - $ref: '#/components/parameters/PagingCursor'
        - $ref: '#/components/parameters/SinceFilter'
        - $ref: '#/components/parameters/SortOrder'
      responses:
        '200':
          $ref: '#/components/responses/CostAccountsResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /purchaseOrders:
    get:
      description: List purchase orders.
      summary: List purchase orders
      operationId: listPurchaseOrders
      tags: [PurchaseOrders]
      parameters:
        - $ref: '#/components/parameters/PagingLimit'
        - $ref: '#/components/parameters/PagingCursor'
        - $ref: '#/components/parameters/SinceFilter'
        - $ref: '#/components/parameters/UptoFilter'
        - $ref: '#/components/parameters/PurchaseOrderStatusFilter'
      responses:
        '200':
          $ref: '#/components/responses/PurchaseOrdersResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      description: |
        Create a purchase order.
        Once the purchase order is created and no longer needs further alterations. You
        will need to call `processPurchaseOrder`.
      summary: Create a purchase order
      operationId: createPurchaseOrder
      tags: [PurchaseOrders]
      requestBody:
        $ref: '#/components/requestBodies/CreatePurchaseOrderRequest'
      responses:
        '201':
          $ref: '#/components/responses/PurchaseOrderResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /purchaseOrders/{purchaseOrderId}:
    get:
      description: Get a purchase order.
      summary: Get a purchase order
      operationId: getPurchaseOrder
      tags: [PurchaseOrders]
      parameters:
        - name: purchaseOrderId
          in: path
          required: true
          description: The internal id of the purchase order.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/PurchaseOrderResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    put:
      description: |
        Update a purchase order.
        Once finished updating the purchase order you should also also call
        `processPurchaseOrder` to kick off reprocessing purchase order matching.
      summary: Update a purchase order
      operationId: updatePurchaseOrder
      tags: [PurchaseOrders]
      parameters:
        - name: purchaseOrderId
          in: path
          required: true
          description: The id of the purchase order.
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/UpdatePurchaseOrderRequest'
      responses:
        '200':
          $ref: '#/components/responses/PurchaseOrderResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: |
        Delete a purchase order.
        Once finished updating the purchase order you should also also call
        `processPurchaseOrder` to kick off reprocessing purchase order matching.
      summary: Delete a purchase order
      operationId: deletePurchaseOrder
      tags: [PurchaseOrders]
      parameters:
        - name: purchaseOrderId
          in: path
          required: true
          description: The internal id of the purchase order.
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/PurchaseOrderDeletedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /purchaseOrders/{purchaseOrderId}/process:
    post:
      description: |
        When the purchase order modifications are completed use this operation to let
        Vic know that it is ready to be processed.
        Once a purchase order is being processed, it can not be modified until
        completed.
      summary: Process the purchase order
      operationId: processPurchaseOrder
      tags: [PurchaseOrders]
      parameters:
        - name: purchaseOrderId
          in: path
          required: true
          description: The internal id of the purchase order.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/PurchaseOrderResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /purchaseOrderLineItems:
    post:
      description: |
        Add a line item to a purchase order.
        Once finished updating the purchase order you should also also call
        `processPurchaseOrder` to kick off reprocessing purchase order matching.
      summary: Add a line item to a purchase order.
      operationId: createPurchaseOrderLineItem
      tags: [PurchaseOrders]
      requestBody:
        $ref: '#/components/requestBodies/CreatePurchaseOrderLineItemRequest'
      responses:
        '201':
          $ref: '#/components/responses/PurchaseOrderLineItemResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /purchaseOrderLineItems/{purchaseOrderLineItemId}:
    put:
      description: |
        Update a purchase order's line item.
        Once finished updating the purchase order you should also also call
        `processPurchaseOrder` to kick off reprocessing purchase order matching.
      summary: Update a purchase order's line item
      operationId: updatePurchaseOrderLineItem
      tags: [PurchaseOrders]
      parameters:
        - name: purchaseOrderLineItemId
          in: path
          required: true
          description: The id of the purchase order line item.
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/UpdatePurchaseOrderLineItemRequest'
      responses:
        '200':
          $ref: '#/components/responses/PurchaseOrderLineItemResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: |
        Delete a purchase order's line item.
        Once finished updating the purchase order you should also also call
        `processPurchaseOrder` to kick off reprocessing purchase order matching.
      summary: Delete a purchase order's line item
      operationId: deletePurchaseOrderLineItem
      tags: [PurchaseOrders]
      parameters:
        - name: purchaseOrderLineItemId
          in: path
          required: true
          description: The id of the purchase order line item.
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/PurchaseOrderLineItemDeletedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/ResourceNotFoundResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /tags:
    get:
      description: |
        Get a list of tags.
        Tags are used to categorize entities.
      summary: Get a list of tags
      operationId: listTags
      tags: [Tags]
      responses:
        '200':
          $ref: '#/components/responses/TagListResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      description: |
        Create a new tag.
      summary: Create a new tag
      operationId: createTag
      tags: [Tags]
      requestBody:
        $ref: '#/components/requestBodies/CreateTagRequest'
      responses:
        '201':
          $ref: '#/components/responses/TagResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /tags/{id}:
    put:
      description: |
        Update a tag.
      summary: Update a tag
      operationId: updateTag
      tags: [Tags]
      parameters:
        - $ref: '#/components/parameters/TagId'
      requestBody:
        $ref: '#/components/requestBodies/UpdateTagRequest'
      responses:
        '200':
          $ref: '#/components/responses/TagResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: |
        Delete a tag.
      summary: Delete a tag
      operationId: deleteTag
      tags: [Tags]
      parameters:
        - $ref: '#/components/parameters/TagId'
      responses:
        '204':
          $ref: '#/components/responses/TagDeletedResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /vendorTags:
    get:
      description: |
        Get a list of vendor tags.
        Vendor tags are used to categorize vendors using tags.
      summary: Get a list of vendor tags
      operationId: listVendorTags
      tags: [Tags]
      responses:
        '200':
          $ref: '#/components/responses/VendorTagListResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      description: |
        Create a new vendor tag.
      summary: Create a new vendor tag
      operationId: createVendorTag
      tags: [Tags]
      requestBody:
        $ref: '#/components/requestBodies/CreateVendorTagRequest'
      responses:
        '201':
          $ref: '#/components/responses/VendorTagResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /vendorTags/{id}:
    delete:
      description: |
        Delete a vendor tag.
      summary: Delete a vendor tag
      operationId: deleteVendorTag
      tags: [Tags]
      parameters:
        - $ref: '#/components/parameters/VendorTagId'
      responses:
        '204':
          $ref: '#/components/responses/VendorTagDeletedResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /paymentTerms:
    get:
      description: |
        Get a list of payment terms.
      summary: Get a list of payment terms
      operationId: listPaymentTerms
      tags: [PaymentTerms]
      responses:
        '200':
          $ref: '#/components/responses/PaymentTermListResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      description: |
        Create a new payment term.
      summary: Create a new payment term
      operationId: createPaymentTerm
      tags: [PaymentTerms]
      requestBody:
        $ref: '#/components/requestBodies/CreatePaymentTermRequest'
      responses:
        '201':
          $ref: '#/components/responses/PaymentTermResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /paymentTerms/{id}:
    put:
      description: |
        Update a payment term.
      summary: Update a payment term
      operationId: updatePaymentTerm
      tags: [PaymentTerms]
      parameters:
        - $ref: '#/components/parameters/PaymentTermId'
      requestBody:
        $ref: '#/components/requestBodies/UpdatePaymentTermRequest'
      responses:
        '200':
          $ref: '#/components/responses/PaymentTermResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntityResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: |
        Delete a payment term.
      summary: Delete a payment term
      operationId: deletePaymentTerm
      tags: [PaymentTerms]
      parameters:
        - $ref: '#/components/parameters/PaymentTermId'
      responses:
        '204':
          $ref: '#/components/responses/PaymentTermDeletedResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  headers:
    NextPageToken:
      description: A link to the next page of responses
      schema:
        type: string
  parameters:
    PathId:
      name: id
      in: path
      required: true
      description: The id of the database entry
      schema:
        type: string
    PagingLimit:
      name: limit
      in: query
      description: How many items to return at one time (max 100) (default 100)
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
    PagingCursor:
      name: cursor
      in: query
      description: Which item to start from
      required: false
      schema:
        type: string
    SinceFilter:
      name: since
      in: query
      description: |
        Datetime value for incremental updates.
        **NOTE**: For external datetimes, the expected format is not in UTC. for
        vic-internal datetimes (see `SinceIsExternal`) the format is UTC.
      required: false
      schema:
        type: string
        format: date-time
    UptoFilter:
      name: upto
      in: query
      description: |
        Datetime value for decremental updates.
      required: false
      schema:
        type: string
        format: date-time
    PurchaseOrderStatusFilter:
      name: status
      in: query
      description: selects the status of purchase orders which are to be searched
      required: false
      schema:
        $ref: '#/components/schemas/PurchaseOrderStatus'
    InvoiceStateFilter:
      name: state
      in: query
      description: |
        selects the state of invoices which are to be searched
        (defaults to `POSTED`)
      required: false
      schema:
        anyOf:
          - $ref: '#/components/schemas/InvoiceState'
          - enum: [ALL, POSTED]
    VendorConfirmedFilter:
      name: confirmed
      in: query
      description: selects if confirmed vendors are to be displayed.
      required: false
      schema:
        type: boolean
        default: true
    VendorUnconfirmedFilter:
      name: unconfirmed
      in: query
      description: selects if unconfirmed vendors are to be displayed.
      required: false
      schema:
        type: boolean
        default: true
    VatCodeFilter:
      name: vatCode
      in: query
      description: selects the vat code which is to be displayed
      required: false
      schema:
        type: string
    Comment:
      name: comment
      in: query
      description: selects the comment which is to be displayed
      required: false
      schema:
        type: string
        maxLength: 255
        nullable: true
    UseSystem:
      name: useSystem
      in: query
      description: |
        Which system to use for id or updatedAt filters.
      required: false
      schema:
        enum: [INTERNAL, EXTERNAL, internal, external]
        default: EXTERNAL
    SortOrder:
      name: sortOrder
      in: query
      description: what sort order should be used for queries
      required: false
      schema:
        enum: [ASCENDING, DESCENDING]
        default: ASCENDING
    RequestId:
      in: header
      name: X-Request-Id
      description: token to be able to correctly log associated requests
      required: false
      schema:
        type: string
        format: uuid
    SubscriptionToken:
      in: header
      name: Authorization
      description: |
        The token provided for the `Subscription`.
        The header will appear as follows `Bearer YOURTOKEN`.
      example: Bearer abc123mysecrettoken456def
      required: false
      schema:
        type: string
    TagId:
      name: id
      in: path
      required: true
      description: The id of the tag
      schema:
        type: string
    VendorTagId:
      name: id
      in: path
      required: true
      description: The id of the vendor tag
      schema:
        type: string
    PaymentTermId:
      name: id
      in: path
      required: true
      description: The id of the payment term
      schema:
        type: string
  schemas:
    InternalId:
      description: The internal id Vic uses for the record.
      type: string
      example: '47'
      readOnly: true
    ExternalId:
      description: |
        The external id set by the ERP system. It does not have to be a UUID and
        can be any non empty string desired.
      type: string
      example: 21b31bc7-1267-4335-893c-d7fe4706a238
      maxLength: 255
    CountryCode:
      description: |
        The ISO-3166 country code. The acceptable values are Alpha-2 codes.
      type: string
      format: ISO-3166
      maxLength: 2
      example: US
    Currency:
      description: The ISO-4217 currency code.
      type: string
      format: ISO-4217
      maxLength: 3
      example: USD
    MonetaryValue:
      description: |
        The monetary value as a string.
        A float **should not** be used. The api will accept a float and it will be
        transformed into a monetary value, but for best results please use a string
        with the proper decimal precision.
      type: string
      format: decimal
      example: '1.00'
    ExternalData:
      description: A free form json object that is stored with the record.
      type: object
    HealthCheck:
      type: object
      required: [status, version, company]
      properties:
        status:
          type: string
          enum: [PASS, FAIL, WARN]
        version:
          type: string
          format: semver
        company:
          type: string
    Account:
      type: object
      required: [number, name, internalId, internalUpdatedAt]
      properties:
        internalId:
          $ref: '#/components/schemas/InternalId'
        internalUpdatedAt:
          type: string
          description: Is in UTC.
          format: date-time
        externalId:
          $ref: '#/components/schemas/ExternalId'
        externalUpdatedAt:
          type: string
          format: date-time
          description: Does not have UTC normalization.
          example: '2021-06-29T17:20:53.154'
        number:
          type: string
          format: number
        name:
          type: string
          maxLength: 255
        externalData:
          allOf:
            - $ref: '#/components/schemas/ExternalData'
          nullable: true
    AccountUpsert:
      type: object
      required: [number, name, externalUpdatedAt]
      properties:
        externalId:
          $ref: '#/components/schemas/ExternalId'
        externalUpdatedAt:
          type: string
          format: date-time
          description: Does not have UTC normalization.
          example: '2021-06-29T17:20:53.154'
        number:
          type: string
          format: number
        name:
          type: string
          maxLength: 255
        externalData:
          allOf:
            - $ref: '#/components/schemas/ExternalData'
          nullable: true
    Accounts:
      type: array
      items:
        $ref: '#/components/schemas/Account'
    Dimension:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
          description: The name of the dimension.
        type:
          type: string
          maxLength: 255
          description: The dimension type.
        typeName:
          type: string
          maxLength: 255
          description: The dimension type name. A human friendly type name.
        typeExternalId:
          type: string
          maxLength: 255
          description: The dimension type's external ID in the ERP system.
        shortName:
          type: string
          maxLength: 255
        externalData:
          allOf:
            - $ref: '#/components/schemas/ExternalData'
          nullable: true
        displayName:
          type: string
        internalId:
          $ref: '#/components/schemas/InternalId'
        internalUpdatedAt:
          type: string
          description: Is in UTC.
          format: date-time
        externalId:
          $ref: '#/components/schemas/ExternalId'
        externalUpdatedAt:
          type: string
          format: date-time
          description: Does not have UTC normalization.
          example: '2021-06-29T17:20:53.154'
    CreateDimension:
      type: object
      required: [externalUpdatedAt, name]
      properties:
        externalId:
          $ref: '#/components/schemas/ExternalId'
        externalUpdatedAt:
          type: string
          format: date-time
          description: Does not have UTC normalization.
          example: '2021-06-29T17:20:53.154'
        name:
          type: string
          maxLength: 255
          description: The name of the dimension.
        type:
          type: string
          maxLength: 255
          description: The dimension type.
        typeName:
          type: string
          maxLength: 255
          description: The dimension type name.
        typeExternalId:
          type: string
          maxLength: 255
          description: |-
            The type's external ID in the ERP system. If left unspecified, it
            will clear the existing value.
        shortName:
          type: string
          maxLength: 255
        externalData:
          allOf:
            - $ref: '#/components/schemas/ExternalData'
          nullable: true
    DimensionUpsert:
      type: object
      required: [externalUpdatedAt, name]
      properties:
        externalId:
          $ref: '#/components/schemas/ExternalId'
        externalUpdatedAt:
          type: string
          format: date-time
          description: Does not have UTC normalization.
          example: '2021-06-29T17:20:53.154'
        name:
          type: string
          maxLength: 255
          description: The name of the dimension.
        type:
          type: string
          maxLength: 255
          description: The dimension type.
        typeName:
          type: string
          maxLength: 255
          description: The dimension type name.
        typeExternalId:
          type: string
          maxLength: 255
          description: |-
            The type's external ID in the ERP system. If left unspecified, it
            will clear the existing value.
        shortName:
          type: string
          maxLength: 255
        externalData:
          allOf:
            - $ref: '#/components/schemas/ExternalData'
          nullable: true
    Dimensions:
      type: array
      items:
        $ref: '#/components/schemas/Dimension'
    DimensionRef:
      type: object
      description: |
        A reference to a dimension within Vic.
        The `internalId` takes precedence over all fields specified. If a
        dimension is not found matching the `internalId` an error will be
        returned.
        When `externalId` is provided, it takes precedence over `name` and can
        be used in combination with `typeExternalId`.
        If `name` is the only field specified and more than one dimension exists
        with that `name`, then an error will be returned. It can be used in
        combination with `typeExternalId`.
        If `typeExternalId` is specified with `externalId` or `name` and more
        than one dimension exists with those fields, then an error will be
        returned.
      properties:
        internalId:
          description: |
            Vic's id of the dimension.
            Takes precedence over all other fields. Other fields are ignored if
            this is specified.
          type: string
          maxLength: 255
          nullable: true
        externalId:
          description: |
            The id of the dimension in the ERP.
            Takes precedence over `name`. Can be used in combination with
            `typeExternalId`.
            If more than one dimension is found meeting the criteria specified,
            an error will be returned.
          type: string
          maxLength: 255
          nullable: true
        name:
          description: |
            The name of the dimension.
            Can be used in combination with `typeExternalId`.
            If more than one dimension is found meeting the criteria specified,
            an error will be returned.
          type: string
          maxLength: 255
          nullable: true
        typeExternalId:
          description: |
            The type id in the ERP.
            This is a supplemental field to be used with `externalId` or `name`.
          type: string
          maxLength: 255
          nullable: true
    CostAccounts:
      type: array
      items:
        $ref: '#/components/schemas/CostAccount'
    CostAccount:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        externalId:
          type: string
          maxLength: 255
        subType:
          type: string
          maxLength: 255
        externalData:
          allOf:
            - $ref: '#/components/schemas/ExternalData'
          nullable: true
        externalUpdatedAt:
          type: string
          format: date-time
    CreditAccountRef:
      type: object
      properties:
        internalId:
          type: string
          maxLength: 255
          nullable: true
        externalId:
          type: string
          maxLength: 255
          nullable: true
    CostAccountInfo:
      type: object
      properties:
        internalId:
          description: The cost account's internal id.
          type: string
          maxLength: 255
          nullable: true
        externalId:
          description: The cost account's external id.
          type: string
          maxLength: 255
          nullable: true
        number:
          description: The cost account's number.
          type: string
          maxLength: 255
          nullable: true
    PaymentKind:
      description: The payment kind.
      enum: [ACH, CHECK, IBAN, BBAN, PLUSGIRO, BANKGIRO]
    InvoicePaymentInfo:
      type: object
      description: |
        The invoice payment information.
        The `kind` field is required in order to determine what payment
        information the invoice needs to use.
        All other fields are optional and should be filled out as best seen fit.
        For `BBAN`, `IBAN`, `PLUSGIRO`, and `BANKGIRO` numbers use the
        `accountNumber` field.
        When using `IBAN` you should specify `bic`.
      required: [kind]
      properties:
        kind:
          $ref: '#/components/schemas/PaymentKind'
        accountHolderName:
          type: string
          maxLength: 255
          nullable: true
        accountNumber:
          type: string
          maxLength: 255
          nullable: true
        routingNumber:
          type: string
          maxLength: 255
          nullable: true
        bic:
          type: string
          maxLength: 255
          nullable: true
    InvoicePaymentTerm:
      type: object
      required: [count, unit]
      properties:
        count:
          type: integer
          minimum: 0
          description: The number of `unit` for the payment term.
        unit:
          $ref: '#/components/schemas/PaymentInfoTermUnit'
    LineItemVat:
      type: object
      properties:
        internalId:
          type: string
          maxLength: 255
          nullable: true
          description: |
            The internal id of the VAT code. If specified, it will take
            precedence over the `externalId` and `code`.
        externalId:
          type: string
          maxLength: 255
          nullable: true
          description: |
            The external id of the VAT code. If specified, it will take
            precedence over the `code`.
        code:
          type: string
          maxLength: 255
          nullable: true
          description: The VAT code.
        amount:
          oneOf:
            - $ref: '#/components/schemas/MonetaryValue'
          nullable: true
          description: |
            The amount of VAT. If the VAT amount is unknown, this should be left
            `NULL` or unspecified.
    CreatePaymentTerm:
      type: object
      required: [name, daysToPay]
      properties:
        name:
          type: string
          nullable: false
          maxLength: 255
          description: The name of the payment term
        daysToPay:
          type: integer
          minimum: 1
          description: The number of days the invoice should be paid in.
        description:
          type: string
          nullable: true
          maxLength: 255
          description: A description of the payment term.
        discountDays:
          type: integer
          nullable: true
          minimum: 0
          description: The number of days the invoice should be paid in to get a discount.
        discountPercentage:
          type: string
          format: decimal
          nullable: true
          minimum: 0
          description: The discount percentage if paid within the number of discount
            days.
    UpdatePaymentTerm:
      type: object
      required: [name, daysToPay]
      properties:
        name:
          type: string
          nullable: false
          maxLength: 255
          description: The name of the payment term
        daysToPay:
          type: integer
          minimum: 1
          description: The number of days the invoice should be paid in.
        description:
          type: string
          nullable: true
          maxLength: 255
          description: A description of the payment term.
        discountDays:
          type: integer
          nullable: true
          minimum: 0
          description: The number of days the invoice should be paid in to get a discount.
        discountPercentage:
          type: string
          format: decimal
          nullable: true
          minimum: 0
          description: The discount percentage if paid within the number of discount
            days.
    PaymentTerm:
      type: object
      required: [name, daysToPay]
      properties:
        id:
          type: string
          description: The payment term's id.
        name:
          type: string
          nullable: false
          maxLength: 255
          description: The name of the payment term
        daysToPay:
          type: integer
          minimum: 1
          description: The number of days the invoice should be paid in.
        description:
          type: string
          nullable: true
          maxLength: 255
          description: A description of the payment term.
        discountDays:
          type: integer
          nullable: true
          minimum: 0
          description: The number of days the invoice should be paid in to get a discount.
        discountPercentage:
          type: string
          format: decimal
          nullable: true
          minimum: 0
          description: The discount percentage if paid within the number of discount
            days.
    CreateInvoiceLineItem:
      type: object
      required: [amount]
      properties:
        index:
          description: |
            A non-negative integer indicating where the line item is in the
            document. No two line items shall be allowed to have the same index.
            If unspecified, it will be inferred based on its position. If
            another line item has an index set, and the current line item is
            left null, it will take the next highest value.
          type: integer
          nullable: true
          minimum: 0
        amount:
          oneOf:
            - $ref: '#/components/schemas/MonetaryValue'
          description: |
            The line item amount, excluding VAT or any other tax amount.
            If VAT is unknown or the tax amount is unknown, the `vat` field
            should be left `NULL` or unspecified.
            If the VAT is known, that should be specified in the `vat.amount`
            field.
        quantityInvoiced:
          description: The quantity of things that were invoiced.
          type: string
          format: decimal
          nullable: true
        comment:
          type: string
          maxLength: 255
          nullable: true
          description: The line item comment.
        description:
          type: string
          maxLength: 255
          nullable: true
          description: The description of the line item.
        billable:
          type: boolean
          nullable: true
        taxCodeId:
          type: string
          format: uuid
          nullable: true
          description: ID of Tax Code to use for the line item.
        vat:
          oneOf:
            - $ref: '#/components/schemas/LineItemVat'
          nullable: true
          description: |
            The VAT information for the specific line item.
            If this value is unknown, it should be left `NULL` or unspecified.
        costAccount:
          oneOf:
            - $ref: '#/components/schemas/CostAccountInfo'
          nullable: true
        dimensions:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/DimensionRef'
    VendorRef:
      type: object
      properties:
        internalId:
          description: |
            The existing vendor internal id. This field takes precedence over
            all other fields when present and not null.
          type: string
          nullable: true
          maxLength: 255
        externalId:
          description: |
            The existing vendor external id. This field takes precedence over
            `orgNumber`.
          type: string
          nullable: true
          maxLength: 255
        orgNumber:
          description: The org number of the vendor to aid in the predictions.
          type: string
          nullable: true
          maxLength: 255
        countryCode:
          allOf:
            - $ref: '#/components/schemas/CountryCode'
          description: The country code of the vendor
          nullable: true
    CreateInvoice:
      description: The shape of the request to create an invoice.
      type: object
      required: [transactionType]
      properties:
        externalId:
          oneOf:
            - $ref: '#/components/schemas/ExternalId'
          description: |
            The external id if it is known within the external system. This
            field can be null.
          nullable: true
        source:
          description: Where the invoice originated from.
          type: string
          nullable: true
          example: Millum
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        refNumber:
          description: Number that appears on the invoice.
          type: string
          maxLength: 255
        poNumber:
          type: string
          nullable: true
        description:
          description: The description of what the invoice is.
          type: string
          nullable: true
        currency:
          description: The currency code the invoice is in.
          type: string
          format: ISO-4217
          maxLength: 3
        language:
          type: string
          nullable: true
          maxLength: 2
          example: en
        issueDate:
          description: The date the invoice was issued on.
          type: string
          format: date
        glDate:
          type: string
          format: date
        dueDate:
          description: The date the invoice is due on.
          type: string
          format: date
        accountNumber:
          type: string
          nullable: true
        servicePeriodStart:
          type: string
          format: date
          nullable: true
        servicePeriodEnd:
          type: string
          format: date
          nullable: true
        paymentRef:
          description: |
            The payment reference number. The KID is a customer identification
            number that is mandatory for invoices in Norway.
          type: string
          maxLength: 255
        paymentInfo:
          oneOf:
            - $ref: '#/components/schemas/InvoicePaymentInfo'
          nullable: true
        paymentTerm:
          oneOf:
            - $ref: '#/components/schemas/InvoicePaymentTerm'
          description: |
            The payment term the invoice should be paid in. If the term is not
            known, pass `null` here.
          nullable: true
        creditAccount:
          oneOf:
            - $ref: '#/components/schemas/CreditAccountRef'
          nullable: true
        vendor:
          oneOf:
            - $ref: '#/components/schemas/VendorRef'
          description: The vendor information that the invoice is from.
          nullable: true
        lineItems:
          type: array
          items:
            $ref: '#/components/schemas/CreateInvoiceLineItem'
        bolNumbers:
          type: array
          items:
            $ref: '#/components/schemas/BillOfLadingNumber'
    CreateTaxCode:
      required: [code, description, rate]
      properties:
        code:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 255
          example: Tax code description
        rate:
          type: string
          format: decimal
          example: '0.25'
    TaxCode:
      type: object
      properties:
        id:
          type: string
          format: uuid
        code:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 255
          example: Tax code description
        rate:
          type: string
          format: decimal
          example: '0.25'
    CreatePurchaseOrder:
      required: [poNumber, amount, vendor, lineItems, issuedOn]
      properties:
        externalId:
          type: string
          nullable: true
          maxLength: 255
          description: The id of the purchase order within the ERP system.
        issuedOn:
          type: string
          format: date
          nullable: false
          description: When the purchase order was issued.
        poNumber:
          type: string
          maxLength: 255
          example: '12003400'
          description: The purchase order number. This is used to match against invoices.
        deliverOn:
          type: string
          format: date
          nullable: true
        amount:
          $ref: '#/components/schemas/MonetaryValue'
        currencyId:
          allOf:
            - $ref: '#/components/schemas/Currency'
          description: The currency that the purchase order uses.
        description:
          type: string
          nullable: true
          maxLength: 255
          description: The description of the purchase order.
        requestor:
          $ref: '#/components/schemas/PurchaseOrderRequestor'
          nullable: true
        createdOn:
          type: string
          format: date
          nullable: true
          description: When the purchase order was created.
        vendor:
          allOf:
            - $ref: '#/components/schemas/VendorRef'
          description: The vendor of the purchase order.
        lineItems:
          type: array
          items:
            $ref: '#/components/schemas/CreatePurchaseOrderItem'
    UpdatePurchaseOrder:
      type: object
      required: [poNumber, amount, vendor]
      properties:
        externalId:
          type: string
          nullable: true
          maxLength: 255
          description: The id of the purchase order within the ERP system.
        issuedOn:
          type: string
          format: date
          nullable: true
          description: When the purchase order was issued.
        poNumber:
          type: string
          maxLength: 255
          example: '12003400'
          description: The purchase order number. This is used to match against invoices.
        deliverOn:
          type: string
          format: date
          nullable: true
        amount:
          $ref: '#/components/schemas/MonetaryValue'
        currencyId:
          allOf:
            - $ref: '#/components/schemas/Currency'
          description: The currency that the purchase order uses.
        description:
          type: string
          nullable: true
          maxLength: 255
          description: The description of the purchase order.
        requestor:
          $ref: '#/components/schemas/PurchaseOrderRequestor'
          nullable: true
        createdOn:
          type: string
          format: date
          nullable: true
          description: When the purchase order was created.
        vendor:
          allOf:
            - $ref: '#/components/schemas/VendorRef'
          description: The vendor of the purchase order.
    CreatePurchaseOrderItem:
      type: object
      required:
        - productNumber
        - quantityReceived
        - quantityRequested
        - unitAmount
        - lineItemTotal
        - lineNumber
      properties:
        productNumber:
          type: string
          nullable: true
          maxLength: 255
        productDescription:
          type: string
          nullable: true
          maxLength: 255
        unitOfMeasure:
          type: string
          nullable: true
          example: kg
          maxLength: 255
        quantityReceived:
          description: The quantity received.
          type: string
          format: decimal
          example: '12.3'
        quantityRequested:
          description: The quantity requested.
          type: string
          format: decimal
          example: '1.0'
        unitAmount:
          $ref: '#/components/schemas/MonetaryValue'
        lineItemTotal:
          $ref: '#/components/schemas/MonetaryValue'
        lineNumber:
          type: integer
          minimum: 1
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/DimensionRef'
    CreatePurchaseOrderLineItem:
      type: object
      required:
        - purchaseOrderId
        - productNumber
        - quantityReceived
        - quantityRequested
        - unitAmount
        - lineItemTotal
        - lineNumber
      properties:
        purchaseOrderId:
          type: string
          description: The ID of the purchase order to attach this line item to.
        productNumber:
          type: string
          nullable: true
          maxLength: 255
        productDescription:
          type: string
          nullable: true
          maxLength: 255
        unitOfMeasure:
          type: string
          nullable: true
          example: kg
          maxLength: 255
        quantityReceived:
          description: The quantity received.
          type: string
          format: decimal
          example: '12.3'
        quantityRequested:
          description: The quantity requested.
          type: string
          format: decimal
          example: '1.0'
        unitAmount:
          $ref: '#/components/schemas/MonetaryValue'
        lineItemTotal:
          $ref: '#/components/schemas/MonetaryValue'
        lineNumber:
          type: integer
          minimum: 1
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/DimensionRef'
    UpdatePurchaseOrderLineItem:
      type: object
      required:
        - productNumber
        - quantityReceived
        - quantityRequested
        - unitAmount
        - lineItemTotal
        - lineNumber
      properties:
        productNumber:
          type: string
          nullable: true
          maxLength: 255
        productDescription:
          type: string
          nullable: true
          maxLength: 255
        unitOfMeasure:
          type: string
          nullable: true
          example: kg
          maxLength: 255
        quantityReceived:
          description: The quantity received.
          type: string
          format: decimal
          example: '12.3'
        quantityRequested:
          description: The quantity requested.
          type: string
          format: decimal
          example: '1.0'
        unitAmount:
          $ref: '#/components/schemas/MonetaryValue'
        lineItemTotal:
          $ref: '#/components/schemas/MonetaryValue'
        lineNumber:
          type: integer
          minimum: 1
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/DimensionRef'
    Invoice:
      type: object
      required:
        - transactionType
        - refNumber
        - poNumber
        - description
        - currency
        - language
        - lineItems
        - status
      properties:
        totalAmount:
          allOf:
            - $ref: '#/components/schemas/MonetaryValue'
          description: The total amount of the invoice, including tax/VAT.
        amountWithoutTax:
          allOf:
            - $ref: '#/components/schemas/MonetaryValue'
          description: The total amount of the invoice, excluding tax.
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        refNumber:
          description: number that appears on the invoice
          type: string
          maxLength: 255
        poNumber:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        currency:
          type: string
          format: ISO-4217
          maxLength: 255
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        language:
          type: string
          nullable: true
        issueDate:
          type: string
          format: date
        glDate:
          type: string
          format: date
        dueDate:
          type: string
          format: date
        paymentInfo:
          $ref: '#/components/schemas/PaymentInfo'
        invoiceInfo:
          $ref: '#/components/schemas/InvoiceInfoNO'
        source:
          description: Where the invoice originates from.
          type: string
          nullable: true
          example: Millum
        internalId:
          type: string
        externalId:
          type: string
          nullable: true
          maxLength: 255
          description: The id of the invoice within the ERP system.
        paymentTerm:
          oneOf:
            - $ref: '#/components/schemas/InvoicePaymentTerm'
          description: |
            The payment term the invoice should be paid in. If the term is not
            known, pass `null` here.
          nullable: true
        paymentRef:
          description: |
            The payment reference number. The KID is a customer identification
            number that is mandatory for invoices in Norway.
          type: string
          maxLength: 255
        vendorInternalId:
          oneOf:
            - $ref: '#/components/schemas/InternalId'
          nullable: true
        vendorExternalId:
          oneOf:
            - $ref: '#/components/schemas/ExternalId'
          nullable: true
        vendor:
          oneOf:
            - $ref: '#/components/schemas/SparseVendor'
          nullable: true
        lineItems:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: '#/components/schemas/InvoiceLineItem'
        postingError:
          type: string
        documentUrl:
          type: string
          format: url
        status:
          $ref: '#/components/schemas/InvoiceState'
        bolNumbers:
          type: array
          items:
            $ref: '#/components/schemas/BillOfLadingNumber'
        selfAssessedUseTaxAmount:
          allOf:
            - $ref: '#/components/schemas/MonetaryValue'
          nullable: true
        selfAssessedUseTaxAccount:
          type: string
          nullable: true
          maxLength: 255
    InvoiceConfirm:
      type: object
      required: [externalId, externalUpdatedAt]
      properties:
        externalId:
          $ref: '#/components/schemas/ExternalId'
        externalUpdatedAt:
          type: string
          format: date-time
        postingError:
          type: string
    InvoiceReject:
      type: object
      required: [item, field, reason]
      properties:
        item:
          type: integer
          minimum: 0
          nullable: true
        field:
          type: string
          nullable: true
        reason:
          type: string
    InvoiceState:
      type: string
      enum:
        - NOT_READY
        - IN_APPROVALS
        - READY_FOR_POST
        - READY_FOR_TRANSFER
        - POSTED
        - TRANSFERRED
    PurchaseOrderStatus:
      type: string
      description: The status of the purchase order.
      enum: [open, closed]
      default: open
    PurchaseOrderLineItem:
      type: object
      required: [internalId]
      properties:
        internalId:
          type: string
          maxLength: 255
        productNumber:
          type: string
          nullable: true
          maxLength: 255
        productDescription:
          type: string
          maxLength: 255
        unitOfMeasure:
          type: string
          maxLength: 255
          description: The unit of measure used.
        quantityRequested:
          description: The quantity requested.
          type: string
          format: decimal
          example: '1.0'
        quantityReceived:
          description: The quantity received.
          type: string
          format: decimal
          example: '1.0'
        unitAmount:
          allOf:
            - $ref: '#/components/schemas/MonetaryValue'
          description: The per-unit amount.
          nullable: true
        lineItemTotal:
          allOf:
            - $ref: '#/components/schemas/MonetaryValue'
          description: The line item total.
          nullable: true
        lineNumber:
          description: The line number of the item in the purchase order.
          type: integer
          minimum: 1
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/DimensionRef'
        invoiceItemsMatched:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/MatchItem'
    PurchaseOrder:
      type: object
      required: [internalId, internalUpdatedAt, status, lineItems]
      properties:
        internalId:
          type: string
          maxLength: 255
        externalId:
          type: string
          maxLength: 255
        vendor:
          $ref: '#/components/schemas/Vendor'
        internalUpdatedAt:
          type: string
          format: date-time
        issuedOn:
          type: string
          format: date
        poNumber:
          type: string
          maxLength: 255
        deliverOn:
          type: string
          format: date
        amount:
          allOf:
            - $ref: '#/components/schemas/MonetaryValue'
          nullable: true
        currencyId:
          allOf:
            - $ref: '#/components/schemas/Currency'
          nullable: true
        status:
          $ref: '#/components/schemas/PurchaseOrderStatus'
        description:
          type: string
          maxLength: 255
        lineItems:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderLineItem'
    PurchaseOrders:
      type: array
      items:
        $ref: '#/components/schemas/PurchaseOrder'
    PurchaseOrderRequestor:
      type: object
      description: The person or entity who requested the purchase order.
      properties:
        email:
          type: string
          nullable: true
          maxLength: 255
        name:
          type: string
          nullable: true
          maxLength: 255
    TrainingInvoice:
      type: object
      required:
        - currency
        - description
        - language
        - lineItems
        - poNumber
        - refNumber
        - transactionType
        - vendorExternalId
      properties:
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        refNumber:
          description: number that appears on the invoice
          type: string
          maxLength: 255
        poNumber:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        currency:
          type: string
          format: ISO-4217
          maxLength: 255
        language:
          type: string
          nullable: true
        issueDate:
          type: string
          format: date
        glDate:
          type: string
          format: date
        dueDate:
          type: string
          format: date
        paymentInfo:
          $ref: '#/components/schemas/PaymentInfo'
        invoiceInfo:
          $ref: '#/components/schemas/InvoiceInfoNO'
        vendorExternalId:
          $ref: '#/components/schemas/ExternalId'
        lineItems:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: '#/components/schemas/InvoiceLineItem'
        externalData:
          allOf:
            - $ref: '#/components/schemas/ExternalData'
          nullable: true
        bolNumbers:
          type: array
          items:
            $ref: '#/components/schemas/BillOfLadingNumber'
    TrainingInvoiceUpsert:
      type: object
      required:
        - transactionType
        - vendorExternalId
        - externalUpdatedAt
        - refNumber
      properties:
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        refNumber:
          description: number that appears on the invoice
          type: string
          maxLength: 255
          nullable: true
        poNumber:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        currency:
          type: string
          format: ISO-4217
          maxLength: 255
          nullable: true
        language:
          type: string
          nullable: true
        issueDate:
          description: needs to be equal or before the current value (if updating)
            or any value (if creating or updating null issue_date value)
          type: string
          format: date
          nullable: true
        glDate:
          type: string
          format: date
          nullable: true
        dueDate:
          type: string
          format: date
          nullable: true
        accountNumber:
          type: string
          nullable: true
        servicePeriodStart:
          type: string
          format: date
          nullable: true
        servicePeriodEnd:
          type: string
          format: date
          nullable: true
        paymentInfo:
          $ref: '#/components/schemas/PaymentInfo'
        invoiceInfo:
          $ref: '#/components/schemas/InvoiceInfoNO'
        vendorExternalId:
          oneOf:
            - $ref: '#/components/schemas/ExternalId'
          nullable: true
        lineItems:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: '#/components/schemas/TrainingInvoiceLineItemUpsert'
        externalData:
          oneOf:
            - $ref: '#/components/schemas/ExternalData'
          nullable: true
        externalId:
          $ref: '#/components/schemas/ExternalId'
        externalUpdatedAt:
          type: string
          format: date-time
          description: Does not have UTC normalization.
          example: '2021-06-29T17:20:53.154'
        bolNumbers:
          type: array
          items:
            $ref: '#/components/schemas/BillOfLadingNumber'
    Invoices:
      type: array
      items:
        $ref: '#/components/schemas/Invoice'
    TrainingInvoices:
      type: array
      items:
        $ref: '#/components/schemas/TrainingInvoice'
    InvoiceLineItem:
      type: object
      required: [costAccountExternalId, dimensionsExternalIds, amount]
      properties:
        index:
          description: |
            A non-negative integer indicating where the line item is in the
            document. No two line items shall be allowed to have the same index.
            If unspecified, it will be inferred based on its position. If
            another line item has an index set, and the current line item is
            left null, it will take the next highest value.
          type: integer
        amount:
          type: number
        description:
          type: string
        comment:
          type: string
        billable:
          type: boolean
          default: false
        accrual:
          $ref: '#/components/schemas/AccrualInfo'
        invoiceLineItemInfo:
          allOf:
            - $ref: '#/components/schemas/InvoiceLineItemInfo'
          nullable: true
        vat:
          oneOf:
            - $ref: '#/components/schemas/LineItemVat'
          nullable: true
        costAccountInternalId:
          allOf:
            - $ref: '#/components/schemas/InternalId'
          nullable: true
          deprecated: true
          description: Use `costAccount` instead.
        costAccountExternalId:
          allOf:
            - $ref: '#/components/schemas/ExternalId'
          nullable: true
          deprecated: true
          description: Use `costAccount` instead.
        costAccount:
          oneOf:
            - $ref: '#/components/schemas/CostAccountInfo'
          nullable: true
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/Dimension'
        dimensionsInternalIds:
          deprecated: true
          description: Use `dimensions` instead.
          type: array
          items:
            $ref: '#/components/schemas/InternalId'
        dimensionsExternalIds:
          deprecated: true
          description: Use `dimensions` instead.
          type: array
          items:
            $ref: '#/components/schemas/ExternalId'
        quantityInvoiced:
          description: The quantity of things that were invoiced.
          type: string
          format: decimal
        lineItemTotal:
          description: The line item total
          allOf:
            - $ref: '#/components/schemas/MonetaryValue'
          nullable: true
        poLineNumber:
          description: The line number in a matched purchase order.
          type: integer
          nullable: true
        poNumber:
          description: The matched purchase order number.
          type: string
          maxLength: 255
          nullable: true
        poItemsMatched:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/MatchItem'
        unitPrice:
          allOf:
            - $ref: '#/components/schemas/MonetaryValue'
          nullable: true
    TrainingInvoiceLineItemUpsert:
      type: object
      required: [costAccountExternalId, amount]
      properties:
        index:
          description: |
            A non-negative integer indicating where the line item is in the
            document. No two line items shall be allowed to have the same index.
            If unspecified, it will be inferred based on its position. If
            another line item has an index set, and the current line item is
            left null, it will take the next highest value.
          type: integer
          minimum: 0
        amount:
          type: number
          description: |
            The line item amount, excluding VAT or any other tax amount.
            If VAT is unknown or the tax amount is unknown, the
            `invoiceLineItemInfo` field should be left `NULL` or unspecified.
            If the VAT is known, that should be specified in the `vat.amount`
            field.
        description:
          type: string
          description: The line item comment.
        comment:
          type: string
          description: The description of the line item.
        billable:
          type: boolean
          default: false
        accrual:
          $ref: '#/components/schemas/AccrualInfo'
        invoiceLineItemInfo:
          allOf:
            - $ref: '#/components/schemas/InvoiceLineItemInfo'
          nullable: true
        costAccountExternalId:
          allOf:
            - $ref: '#/components/schemas/ExternalId'
          nullable: true
        dimensionsExternalIds:
          description: |
            This has been deprecated. Please use the `dimensions` field to
            specify the dimensions to set for this line item.
          deprecated: true
          type: array
          items:
            $ref: '#/components/schemas/ExternalId'
        dimensions:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/DimensionRef'
        lineItemIsVatOnly:
          type: boolean
          default: false
        quantityInvoiced:
          description: The quantity of things that were invoiced.
          type: string
          format: decimal
          nullable: true
    VatCode:
      type: object
      required: [internalId, internalUpdatedAt, code, description]
      properties:
        internalId:
          $ref: '#/components/schemas/InternalId'
        internalUpdatedAt:
          type: string
          description: Is in UTC.
          format: date-time
        externalId:
          $ref: '#/components/schemas/ExternalId'
        externalUpdatedAt:
          type: string
          format: date-time
          description: Does not have UTC normalization.
          example: '2021-06-29T17:20:53.154'
        code:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 255
        activeStartingAt:
          type: string
          format: date-time
        activeEndingAt:
          type: string
          format: date-time
        rate:
          type: number
        remoteData:
          type: object
        defaultInvoiceCreditAccount:
          type: string
          maxLength: 255
        vatCreditAccount:
          type: string
          maxLength: 255
        vatDebitAccount:
          type: string
          maxLength: 255
    VatCodes:
      type: array
      items:
        $ref: '#/components/schemas/VatCode'
    VatCodeUpsert:
      type: object
      required: [externalUpdatedAt]
      properties:
        code:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 255
        externalId:
          $ref: '#/components/schemas/ExternalId'
        externalUpdatedAt:
          type: string
          format: date-time
          description: Does not have UTC normalization.
          example: '2021-06-29T17:20:53.154'
        activeStartingAt:
          type: string
          format: date-time
        activeEndingAt:
          type: string
          format: date-time
        rate:
          type: number
        remoteData:
          type: object
        defaultInvoiceCreditAccount:
          type: string
          maxLength: 255
        vatCreditAccount:
          type: string
          maxLength: 255
        vatDebitAccount:
          type: string
          maxLength: 255
    CreateVendorGroup:
      type: object
      required: [name]
      properties:
        name:
          type: string
          description: The name of the vendor group
    UpdateVendorGroup:
      type: object
      required: [name]
      properties:
        name:
          type: string
          description: The name of the vendor group
    VendorGroup:
      type: object
      required: [id, name]
      properties:
        id:
          type: string
          description: The id of the vendor group.
        name:
          type: string
          description: The name of the vendor group
    VendorGroups:
      type: array
      items:
        $ref: '#/components/schemas/VendorGroup'
    VendorState:
      type: string
      enum: [CONFIRMED, UNCONFIRMED]
    VendorStateFilter:
      type: string
      description: |
        - `PENDING` - The vendor is not confirmed, has no errors, and was
          not predicted. It is pending to be confirmed.
        - `ACTIVE` - The vendor is confirmed and has no errors.
        - `PREDICTED` - The vendor was predicted by Vic.
        - `ERRORED` - The vendor has errors set.
      enum: [ACTIVE, PENDING, PREDICTED, ERRORED]
    SparseVendor:
      type: object
      description: A vendor object but sparsely populated.
      required: [internalId]
      properties:
        internalId:
          $ref: '#/components/schemas/InternalId'
        externalId:
          oneOf:
            - $ref: '#/components/schemas/ExternalId'
          nullable: true
        orgNumber:
          type: string
          nullable: true
        countryCode:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
    Vendor:
      type: object
      required:
        - internalId
        - internalUpdatedAt
        - name
        - email
        - phone
        - addressStreet
        - addressCity
        - addressState
        - addressPostalCode
        - countryCode
      properties:
        internalId:
          $ref: '#/components/schemas/InternalId'
        internalUpdatedAt:
          type: string
          description: Is in UTC.
          format: date-time
        externalId:
          $ref: '#/components/schemas/ExternalId'
        externalUpdatedAt:
          type: string
          format: date-time
          description: Does not have UTC normalization.
          example: '2021-06-29T17:20:53.154'
        name:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
          nullable: true
        description:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        addressStreet:
          type: string
          nullable: true
        addressCity:
          type: string
          nullable: true
        addressState:
          type: string
          nullable: true
        addressPostalCode:
          type: string
          nullable: true
        countryCode:
          type: string
          nullable: true
        currency:
          type: string
          format: ISO-4217
          maxLength: 3
        confirmedAt:
          type: string
          format: date-time
          nullable: true
        state:
          $ref: '#/components/schemas/VendorState'
        taxInfo:
          $ref: '#/components/schemas/VendorTaxInfo'
        defaultPaymentInfo:
          $ref: '#/components/schemas/PaymentInfo'
        paymentTermId:
          description: The id of the `PaymentTerm` a vendor uses.
          type: string
          format: uuid
          nullable: true
        vendorGroupId:
          description: The `VendorGroup` id the vendor is attached to.
          type: string
          format: uuid
          nullable: true
        externalData:
          allOf:
            - $ref: '#/components/schemas/ExternalData'
          nullable: true
        errors:
          description: The errors that occurred in the external ERP system.
          items:
            $ref: '#/components/schemas/VendorRemoteError'
    Vendors:
      type: array
      items:
        $ref: '#/components/schemas/Vendor'
    VendorUpsert:
      type: object
      required: [externalUpdatedAt]
      properties:
        externalId:
          $ref: '#/components/schemas/ExternalId'
        externalUpdatedAt:
          type: string
          format: date-time
          description: Does not have UTC normalization.
          example: '2021-06-29T17:20:53.154'
        name:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
          nullable: true
        phone:
          type: string
          nullable: true
        addressStreet:
          type: string
          nullable: true
        addressCity:
          type: string
          nullable: true
        addressState:
          type: string
          nullable: true
        addressPostalCode:
          type: string
          nullable: true
        countryCode:
          type: string
          nullable: true
        currency:
          type: string
          format: ISO-4217
          maxLength: 3
        confirmedAt:
          type: string
          format: date-time
          nullable: true
        state:
          $ref: '#/components/schemas/VendorState'
        taxInfo:
          $ref: '#/components/schemas/VendorTaxInfo'
        defaultPaymentInfo:
          $ref: '#/components/schemas/PaymentInfo'
        paymentTermId:
          description: The id of the `PaymentTerm` a vendor uses.
          type: string
          format: uuid
          nullable: true
        vendorGroupId:
          description: The `VendorGroup` id the vendor is attached to.
          type: string
          format: uuid
          nullable: true
        externalData:
          allOf:
            - $ref: '#/components/schemas/ExternalData'
          nullable: true
        managers:
          type: array
          items:
            $ref: '#/components/schemas/VendorManager'
        errors:
          description: The errors that occurred in the external ERP system.
          items:
            $ref: '#/components/schemas/VendorRemoteError'
    VendorCallback:
      type: object
      required:
        - addressCity
        - addressPostalCode
        - addressState
        - addressStreet
        - countryCode
        - email
        - internalId
        - name
        - phone
      properties:
        internalId:
          $ref: '#/components/schemas/InternalId'
        name:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
          nullable: true
        phone:
          type: string
          nullable: true
        addressStreet:
          type: string
          nullable: true
        addressCity:
          type: string
          nullable: true
        addressState:
          type: string
          nullable: true
        addressPostalCode:
          type: string
          nullable: true
        countryCode:
          type: string
          nullable: true
        currency:
          type: string
          format: ISO-4217
          maxLength: 3
        confirmedAt:
          type: string
          format: date-time
          nullable: true
        state:
          $ref: '#/components/schemas/VendorState'
        taxInfo:
          $ref: '#/components/schemas/VendorTaxInfo'
        defaultPaymentInfo:
          $ref: '#/components/schemas/PaymentInfo'
        paymentTermId:
          description: The id of the `PaymentTerm` a vendor uses.
          type: string
          format: uuid
          nullable: true
        vendorGroupId:
          description: The `VendorGroup` id the vendor is attached to.
          type: string
          format: uuid
          nullable: true
        externalData:
          allOf:
            - $ref: '#/components/schemas/ExternalData'
          nullable: true
        errors:
          description: The errors that occurred in the external ERP system.
          items:
            $ref: '#/components/schemas/VendorRemoteError'
    VendorConfirm:
      type: object
      required: [externalId, externalUpdatedAt]
      properties:
        externalId:
          $ref: '#/components/schemas/ExternalId'
        externalUpdatedAt:
          type: string
          format: date-time
          description: Does not have UTC normalization.
          example: '2021-06-29T17:20:53.154'
    SubscriptionUpsert:
      type: object
      properties:
        callbackUrl:
          type: string
          format: uri
          example: https://my.erp.com/vic-callback/
        accessToken:
          type: string
          maxLength: 1024
        expiresAt:
          type: string
          format: date-time
      required: [callbackUrl, accessToken, expiresAt]
    Error:
      description: |
        generic error message in JSON format.  Note the 'code' field should
        match the HTTP status code of the wrapping HTTP request.
      type: object
      required: [code, message]
      properties:
        code:
          type: integer
          minimum: 100
          maximum: 599
        message:
          $ref: '#/components/schemas/ErrorString'
    VendorManager:
      type: object
      description: |
        Vic.ai user who manages a vendor.
        When `email` is provided, it takes priority over `name`. If no user
        exists with the `email` provided, then `name` will be used as a
        fallback. If neither are found, the api will return an error.
      properties:
        email:
          type: string
          nullable: true
          maxLength: 255
        name:
          type: string
          nullable: true
          maxLength: 255
    VendorRemoteError:
      description: |
        The remote error on a Vendor.
        This is to describe any errors that have happened in the ERP system. If
        the error that occurred does not pertain to a specific field, then the
        `field` can be left null, or missing all together.
      type: object
      required: [message]
      properties:
        message:
          type: string
          maxLength: 1024
        field:
          description: |
            The field on the Vic.ai vendor that has the error.
            If the error does not pertain to a specific field, then this will be
            null.
            Example: `{"field": "name"}` or `{"field": "externalUpdatedAt"}`
          type: string
          maxLength: 255
    SetVendorRemoteErrors:
      description: Data structure for setting a Vendor's remote errors.
      type: object
      required: [errors]
      properties:
        errors:
          items:
            $ref: '#/components/schemas/VendorRemoteError'
    VendorError:
      description: |
        Data structure for describing errors when posting a vendor to an
        ERP.  Use a string to describe a single error that applies to
        the entire vendor object, or describes a general error when
        attempting to post, e.g. a connection error.  Use an array of
        strings if multiple errors apply to the entire vendor object.
        If errors apply to specific fields in the ERP, in lieu of a string
        return a FieldError object.
      oneOf:
        - $ref: '#/components/schemas/ErrorString'
        - type: array
          maxItems: 64
          items:
            oneOf:
              - $ref: '#/components/schemas/ErrorString'
              - $ref: '#/components/schemas/FieldError'
    ErrorString:
      type: string
      maxLength: 255
    FieldError:
      description: |
        Data structure for describing an error associated with a specific
        field in another datastructure.
        - internalField represents the Vic.API field name
        - externalField represents the associated field name in the ERP
      type: object
      required: [internalField, externalField, message]
      properties:
        internalField:
          $ref: '#/components/schemas/ErrorString'
        externalField:
          $ref: '#/components/schemas/ErrorString'
        message:
          $ref: '#/components/schemas/ErrorString'
    PaymentInfoTermUnit:
      type: string
      description: The payment term units supported.
      enum: [DAYS]
    PaymentInfoTerm:
      type: object
      required: [count, unit]
      properties:
        count:
          type: integer
          minimum: 1
        unit:
          $ref: '#/components/schemas/PaymentInfoTermUnit'
    AccrualTermUnit:
      type: string
      description: The accrual term units supported.
      enum: [MONTHS]
    AccrualInfo:
      required: [start, count, unit]
      properties:
        start:
          type: string
          format: date
        count:
          type: integer
          nullable: true
          description: |
            The number of units from the `start`. The system _may_ have this field as
            `null` due to incomplete information or a user has cleared the information.
            However, when specifying the `count` to the api, it is required to be
            greater than `1`.
        unit:
          $ref: '#/components/schemas/AccrualTermUnit'
    TransactionType:
      type: string
      description: The type of invoice transaction.
      enum: [INVOICE, CREDITNOTE]
      default: INVOICE
    CustomField:
      type: object
      properties:
        id:
          type: string
          maxLength: 255
        value:
          type: string
          maxLength: 255
        label:
          type: string
          maxLength: 255
    VendorTaxInfo:
      type: object
      properties:
        taxId:
          type: string
          nullable: true
        is1099vendor:
          type: boolean
        orgNumber:
          type: string
          nullable: true
    InternationalBankAccount:
      type: object
      properties:
        iban:
          type: string
          maxLength: 255
          nullable: true
        bic:
          type: string
          maxLength: 255
          nullable: true
    PaymentInfoMethod:
      type: string
      description: |
        The payment method to be used.
        Note: `BANKACCOUNT` is equivalent to `ACH` in the Web UI.
      enum: [BANKACCOUNT, BANKGIRO, PLUSGIRO, IBAN, BBAN]
    PaymentInfo:
      type: object
      properties:
        bankAccountNum:
          type: string
          maxLength: 255
          nullable: true
        bankCode:
          type: string
          nullable: true
        paymentTerm:
          allOf:
            - $ref: '#/components/schemas/PaymentInfoTerm'
          nullable: true
        bankGiro:
          type: string
          maxLength: 255
          nullable: true
        plusGiro:
          type: string
          maxLength: 255
          nullable: true
        bban:
          type: string
          maxLength: 255
          nullable: true
        internationalBankAccount:
          allOf:
            - $ref: '#/components/schemas/InternationalBankAccount'
          nullable: true
        defaultMethod:
          $ref: '#/components/schemas/PaymentInfoMethod'
    InvoiceInfoNO:
      type: object
      required: [kid]
      properties:
        kid:
          deprecated: true
          description: |
            **Deprecated**: The `paymentRef` on the `Invoice` should be used
            instead.
            The KID is a customer identification number that is mandatory for
            invoices in Norway.
          type: string
        creditAccountExternalId:
          type: string
        creditAccountInternalId:
          type: string
    InvoiceLineItemInfo:
      type: object
      properties:
        vatCode:
          type: string
          nullable: true
        vatAmount:
          type: number
          nullable: true
    RequestIdCallback:
      type: object
      required: [requestId]
      properties:
        requestId:
          type: string
          format: uuid
    GetTokenInput:
      type: object
      required: [client_id, client_secret]
      properties:
        client_id:
          type: string
        client_secret:
          type: string
    GetTokenResult:
      type: object
      required: [access_token, token_type, expires_in]
      properties:
        access_token:
          type: string
        token_type:
          enum: [Bearer]
        expires_in:
          type: integer
    UnsubscribeResult:
      enum: [OK]
    Tags:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    Tag:
      type: object
      required: [value]
      properties:
        id:
          type: string
        value:
          type: string
          maxLength: 255
    VendorTags:
      type: array
      items:
        $ref: '#/components/schemas/VendorTag'
    VendorTag:
      type: object
      required: [vendorId, tagId]
      properties:
        id:
          type: string
        vendorId:
          type: string
        tagId:
          type: string
    CreateTag:
      type: object
      required: [value]
      properties:
        value:
          type: string
          maxLength: 255
    UpdateTag:
      type: object
      required: [value]
      properties:
        value:
          type: string
          maxLength: 255
    CreateVendorTag:
      type: object
      required: [vendorId, tagId]
      properties:
        vendorId:
          type: string
        tagId:
          type: string
    MatchItem:
      type: object
      required: [invoiceItemId, purchaseOrderItemId, quantityMatched]
      properties:
        invoiceItemId:
          type: string
          description: The invoice item's internal id.
        purchaseOrderItemId:
          type: string
          description: The purchase order item's internal id.
        quantityMatched:
          type: string
    BillOfLadingNumber:
      description: The bill of lading number.
      type: object
      required: [bolNumber]
      properties:
        bolNumber:
          type: string
  requestBodies:
    CreatePurchaseOrderRequest:
      description: Create a purchase order.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatePurchaseOrder'
    UpdatePurchaseOrderRequest:
      description: Create a purchase order.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdatePurchaseOrder'
    CreatePurchaseOrderLineItemRequest:
      description: Create a purchase order line item.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatePurchaseOrderLineItem'
    UpdatePurchaseOrderLineItemRequest:
      description: Update a purchase order line item.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdatePurchaseOrderLineItem'
    CreateDimensionRequest:
      description: Create a dimension.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateDimension'
    CreateTagRequest:
      description: Create a tag.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateTag'
    UpdateTagRequest:
      description: Update a tag.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateTag'
    CreateVendorTagRequest:
      description: Create a vendor tag.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateVendorTag'
    CreatePaymentTermRequest:
      description: Create a payment term.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatePaymentTerm'
    CreateTaxCode:
      description: Create a tax code.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateTaxCode'
    CreateVendorGroupRequest:
      description: Create a vendor group.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateVendorGroup'
    UpdateVendorGroupRequest:
      description: Update a vendor group.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateVendorGroup'
    UpdatePaymentTermRequest:
      description: Update a payment term.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdatePaymentTerm'
  responses:
    ForbiddenResponse:
      description: The request was forbidden.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ResourceNotFoundResponse:
      description: Resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnprocessableEntityResponse:
      description: Errors with the input are present.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ErrorResponse:
      description: An unexpected error has occurred. Check the body for more details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TokenCreatedResponse:
      description: Successful access token request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetTokenResult'
    HealthyResponse:
      description: Successful health check response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HealthCheck'
    AccountsResponse:
      description: A paged array of accounts
      headers:
        x-next:
          $ref: '#/components/headers/NextPageToken'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Accounts'
    AccountResponse:
      description: Shows the account.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Account'
    AccountUpsertedResponse:
      description: Account was upserted successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Account'
    AccountDeletedResponse:
      description: Information for deleted account
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Account'
    DimensionsResponse:
      description: A paged array of dimensions
      headers:
        x-next:
          $ref: '#/components/headers/NextPageToken'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Dimensions'
    DimensionResponse:
      description: A dimension.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Dimension'
    DimensionCreatedResponse:
      description: Dimension was created successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Dimension'
    DimensionUpdatedResponse:
      description: Dimension was updated successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Dimension'
    DimensionDeletedResponse:
      description: Dimension was deleted successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Dimension'
    VendorsResponse:
      description: A paged array of vendors
      headers:
        x-next:
          $ref: '#/components/headers/NextPageToken'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Vendors'
    VendorResponse:
      description: A single vendor.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Vendor'
    VendorCreatedResponse:
      description: Vendor was successfully created.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Vendor'
    VendorUpdatedResponse:
      description: Vendor was successfully updated.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Vendor'
    VendorDeletedResponse:
      description: Vendor was successfully deleted.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Vendor'
    VendorGroupsResponse:
      description: List of vendor groups.
      headers:
        x-next:
          $ref: '#/components/headers/NextPageToken'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VendorGroups'
    VendorGroupResponse:
      description: List of vendor groups.
      headers:
        x-next:
          $ref: '#/components/headers/NextPageToken'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VendorGroup'
    VendorGroupDeletedResponse:
      description: Vendor group was successfully deleted.
    VendorRemoteErrorsUpdatedResponse:
      description: Vendor errors were successfully updated.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Vendor'
    VendorRemoteErrorsClearedResponse:
      description: Vendor errors were successfully cleared.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Vendor'
    InvoicesResponse:
      description: A paged array of invoices
      headers:
        x-next:
          $ref: '#/components/headers/NextPageToken'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Invoices'
    InvoiceCreatedResponse:
      description: Invoice was created successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Invoice'
    InvoiceResponse:
      description: A single invoice.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Invoice'
    InvoiceDeletedResponse:
      description: Invoice was successfully deleted.
    InvoiceDocumentResponse:
      description: The invoice's document.
      content:
        application/pdf:
          schema:
            type: string
            format: binary
    InvoiceConfirmedResponse:
      description: The invoice was confirmed successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Invoice'
    InvoiceRejectedResponse:
      description: The invoice was rejection error message was acknowledged.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Invoice'
    InvoiceLineItemsResponse:
      description: The ungrouped line items for the invoice.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/InvoiceLineItem'
    TrainingInvoicesResponse:
      description: A paged array of training invoices.
      headers:
        x-next:
          $ref: '#/components/headers/NextPageToken'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TrainingInvoices'
    TrainingInvoiceResponse:
      description: A single training invoice.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TrainingInvoice'
    TrainingInvoiceUpsertedResponse:
      description: Training invoice was successfully upserted.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TrainingInvoice'
    TrainingInvoiceDeletedResponse:
      description: Training invoice was successfully deleted.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TrainingInvoice'
    TrainingInvoiceDocumentResponse:
      description: The document attached to the training invoice.
      content:
        application/pdf: {}
    VatCodesResponse:
      description: An array of vat codes
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VatCodes'
    VatCodeResponse:
      description: A single vat code.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VatCode'
    VatCodeUpsertedResponse:
      description: Vat code upserted successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VatCode'
    VatCodeDeletedResponse:
      description: Vat code deleted successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VatCode'
    SubscriptionResponse:
      description: The subscription information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubscriptionUpsert'
    SubscriptionUpsertedResponse:
      description: Subscription successfully upserted.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubscriptionUpsert'
    SubscriptionDeletedResponse:
      description: Subscription successfully deleted.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnsubscribeResult'
    CostAccountsResponse:
      description: An array of cost accounts
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CostAccounts'
    PurchaseOrdersResponse:
      description: A paged array of purchase orders
      headers:
        x-next:
          $ref: '#/components/headers/NextPageToken'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PurchaseOrders'
    PurchaseOrderResponse:
      description: The purchase order.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PurchaseOrder'
    PurchaseOrderLineItemResponse:
      description: The purchase order line item.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PurchaseOrderLineItem'
    PurchaseOrderDeletedResponse:
      description: Purchase order was successfully deleted.
    PurchaseOrderLineItemDeletedResponse:
      description: Purchase order line item was successfully deleted.
    TagListResponse:
      description: A list of tags.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Tags'
    TagResponse:
      description: A single tag.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Tag'
    TagDeletedResponse:
      description: Tag was successfully deleted.
    TaxCodeResponse:
      description: A tax code.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TaxCode'
    VendorTagListResponse:
      description: A list of vendor tags.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VendorTags'
    VendorTagResponse:
      description: A single vendor tag.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VendorTag'
    VendorTagDeletedResponse:
      description: Vendor tag was successfully deleted.
    PaymentTermListResponse:
      description: A list of payment terms.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentTerm'
    PaymentTermResponse:
      description: A single payment term.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentTerm'
    PaymentTermDeletedResponse:
      description: Payment term was successfully deleted.
